        -:    0:Source:testdominion.c
        -:    0:Graph:testdominion.gcno
        -:    0:Data:testdominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:#include "rngs.h"
        -:    5:#include "dominion.c"
        -:    6:#include "dominionTestUtilities.h"
        -:    7:
        -:    8:
        -:    9:
      868:   10:const char* sayCard(int theCard){
      868:   11:    switch(theCard){
        -:   12:
        -:   13:        case curse:
       40:   14:            return "curse";
        -:   15:        case estate:
       23:   16:            return "estate";
        -:   17:        case duchy:
       16:   18:            return "duchy";
        -:   19:        case province:
        7:   20:            return "province";
        -:   21:        case copper:
       42:   22:            return "copper";
        -:   23:        case silver:
      123:   24:            return "silver";
        -:   25:        case gold:
       96:   26:            return "gold";
        -:   27:        case adventurer:
        3:   28:            return "adventurer";
        -:   29:        case council_room:
       20:   30:            return "council room";
        -:   31:        case feast:
        3:   32:            return "feast";
        -:   33:        case gardens:
       86:   34:            return "gardens";
        -:   35:        case mine:
       89:   36:            return "mine";
        -:   37:        case remodel:
        6:   38:            return "remodel";
        -:   39:        case smithy:
        3:   40:            return "smithy";
        -:   41:        case village:
       10:   42:            return "village";
        -:   43:        case baron:
       20:   44:            return "baron";
        -:   45:        case great_hall:
        6:   46:            return "great hall";
        -:   47:        case minion:
        3:   48:            return "minion";
        -:   49:        case steward:
       10:   50:            return "steward";
        -:   51:        case tribute:
        3:   52:            return "tribute";
        -:   53:        case ambassador:
       31:   54:            return "ambassador";
        -:   55:        case cutpurse:
       44:   56:            return "cutpurse";
        -:   57:        case embargo:
       18:   58:            return "embargo";
        -:   59:        case outpost:
        8:   60:            return "outpost";
        -:   61:        case salvager:
       21:   62:            return "salvager";
        -:   63:        case sea_hag:
       40:   64:            return "sea hag";
        -:   65:        case treasure_map:
       97:   66:            return "treasure map";
        -:   67:        default:
    #####:   68:            return "INVALID CARD";
        -:   69:
        -:   70:    }
        -:   71:}
        -:   72:
        -:   73:
      425:   74:void buyCards(struct gameState* game){
        -:   75:
      425:   76:    int done=0;
        -:   77:    int theCard;
     2326:   78:    while(done==0){
        -:   79:
        -:   80:        int succ;
        -:   81:
     1476:   82:        if((Random()>0.50)){
      769:   83:            theCard=(int)(Random()*1.9999)+silver;
        -:   84:        }
        -:   85:        else{
      707:   86:            theCard=(int)(Random()*(treasure_map+0.9999));
        -:   87:	}
        -:   88:
        -:   89:
     1476:   90:        succ=buyCard(theCard,game);
        -:   91:        
     1476:   92:	if(succ!=-1){
      425:   93:	   printf("\n    Bought card %s, numBuys is %d",sayCard(theCard),game->numBuys);
        -:   94:	}
     1476:   95:        if( ( (game->coins<2) && (Random()*2>1) ) ||  game->numBuys<=0 ){
      425:   96:            done=1;
        -:   97:        }
        -:   98:
        -:   99:    }
        -:  100:
      425:  101:}
        -:  102:
        -:  103:
      680:  104:void useCard(struct gameState* game){
        -:  105:
        -:  106:    int otherCard;
        -:  107:    int pos;
        -:  108:    int theHandCard;
        -:  109:    int theSuppCard;
        -:  110:    int lim;
        -:  111:    int theFirst;
        -:  112:    int cardOne;
        -:  113:    int cardTwo;
        -:  114:    int handPos;
        -:  115:
      680:  116:    int tryCounter=0;
        -:  117:
        -:  118:    do{
     4656:  119:        handPos=(int)(Random()*(game->handCount[game->whoseTurn]-0.001));
     4656:  120:	tryCounter++;
        -:  121:    }
     4656:  122:    while(game->hand[game->whoseTurn][handPos]<adventurer && tryCounter<10);
      680:  123:    if(tryCounter==10){
      348:  124:       printf("Bluh");
      348:  125:       game->numActions--;
      348:  126:       return;
        -:  127:    }
        -:  128:
      332:  129:    int theCard=game->hand[game->whoseTurn][handPos];
        -:  130:
      332:  131:    switch(theCard){
        -:  132:        case feast:
        -:  133:            //Ch1: Extant card in supply with cost 5 or less
        -:  134:            do{
    #####:  135:                otherCard=(int)(Random()*(treasure_map+0.9999));
    #####:  136:		tryCounter++;
        -:  137:            }
    #####:  138:            while( supplyCount(otherCard,game)>0 && getCost(otherCard)>5 && tryCounter<15);
    #####:  139:	    if(tryCounter==15){
    #####:  140:	       game->numActions--;
    #####:  141:	       return;
        -:  142:	    }
    #####:  143:            playCard(handPos,otherCard,0,0,game);
    #####:  144:            break;
        -:  145:
        -:  146:        case baron:
        -:  147:            //Ch1: 0 or 1
        9:  148:            playCard(handPos,(int)(Random()*1.9999),0,0,game);
        9:  149:            break;
        -:  150:
        -:  151:        case embargo:
        -:  152:            //Ch1: Card in supply
        8:  153:            playCard(handPos,(int)(Random()*(treasure_map+0.9999)),0,0,game);
        8:  154:            break;
        -:  155:
        -:  156:        case salvager:
        -:  157:            //Ch1: Card in hand
        9:  158:            playCard(handPos,(int)(Random()*(game->handCount[game->whoseTurn]+0.9999)),0,0,game);
        9:  159:            break;
        -:  160:
        -:  161:        case mine: //Requires treasure in hand
        -:  162:            //Ch1: Treasure we're tossing (in hand)
        -:  163:            //Ch2: Treasure we're getting (in supply)
       79:  164:            pos=0;
       79:  165:            theHandCard=-1;
       79:  166:            lim=game->handCount[game->whoseTurn];
      196:  167:            while(pos<lim){
      117:  168:                if(game->hand[game->whoseTurn][pos]==copper){
       27:  169:                    theHandCard=pos;
       27:  170:                    theSuppCard=silver;
       27:  171:                    break;
        -:  172:                }
       90:  173:                if(game->hand[game->whoseTurn][pos]==silver){
       52:  174:                    theHandCard=pos;
       52:  175:                    theSuppCard=gold;
       52:  176:                    break;
        -:  177:                }
       38:  178:                pos++;
        -:  179:            }
       79:  180:            if(theHandCard==-1){
    #####:  181:                return;
        -:  182:            }
       79:  183:            playCard(handPos,theHandCard,theSuppCard,0,game);
       79:  184:            break;
        -:  185:
        -:  186:        case remodel:
        -:  187:            //Ch1: Card we're tossing (in hand)
        -:  188:            //Ch2: Card we're getting (in supply)
        2:  189:            playCard(handPos,
        1:  190:                     (int)(Random()*(game->handCount[game->whoseTurn]+0.9999)),
        1:  191:                     (int)(Random()*(treasure_map+0.9999)),
        -:  192:                     0,
        -:  193:                     game);
        1:  194:            break;
        -:  195:        case minion:
        -:  196:            //Ch1 xor Ch2, first gets 2 gold, other does weird BS
    #####:  197:            if(Random()>0.5){
    #####:  198:                playCard(handPos,1,0,0,game);
        -:  199:            }
        -:  200:            else{
    #####:  201:                playCard(handPos,0,1,0,game);
        -:  202:            }
    #####:  203:            break;
        -:  204:        case ambassador:
        -:  205:            //Ch1: a card in hand
        -:  206:            //Ch2= [0,2]
       24:  207:            playCard(handPos,
       12:  208:                     (int)(Random()*(game->handCount[game->whoseTurn]+0.9999)),
       12:  209:                     (int)(Random()*2.9999),0,game);
       12:  210:            break;
        -:  211:        case steward:
        -:  212:            //Ch1= [1,3]
        -:  213:            //Ch2: if Ch1=3, a card in hand
        -:  214:            //Ch3: if Ch1=3, a card in hand
        3:  215:            theFirst=1+(int)(Random()*2.9999);
        3:  216:            if(theFirst==3){
    #####:  217:                cardOne=(int)(Random()*(game->handCount[game->whoseTurn]+0.9999));
    #####:  218:                cardTwo=(int)(Random()*(game->handCount[game->whoseTurn]+0.9999));
    #####:  219:                playCard(handPos,theFirst,cardOne,cardTwo,game);
        -:  220:            }
        -:  221:            else{
        3:  222:                playCard(handPos,theFirst,0,0,game);
        -:  223:            }
        3:  224:            break;
        -:  225:        default:
      211:  226:            playCard(handPos,0,0,0,game);
        -:  227:    }
        -:  228:
      332:  229:    printf("\nPlayed card %s",sayCard(theCard));
        -:  230:
        -:  231:}
        -:  232:
        -:  233:
        -:  234:
      425:  235:void playATurn(struct gameState* game){
        -:  236:
     1530:  237:    while(game->numActions>0){
      680:  238:        printf("Trying to use card");
      680:  239:        useCard(game);
      680:  240:	getCount(game);
        -:  241:    }
      425:  242:    printf("Trying to buy");
      425:  243:    buyCards(game);
        -:  244:
      425:  245:    printf("Ending Turn");
      425:  246:    endTurn(game);
      425:  247:    getCount(game);
        -:  248:
      425:  249:}
        -:  250:
        -:  251:
        3:  252:void playAGame(){
        -:  253:
        3:  254:    struct gameState* game=newGame();
        3:  255:    int* theKingdomCards=getRandomKindomCards();
        3:  256:    int pos=0;
        3:  257:    printf("Initialization Card List:");
       36:  258:    while(pos<10){
       30:  259:       printf("\n   -%s",sayCard(theKingdomCards[pos]));
       30:  260:       pos++;
        -:  261:    }
        -:  262:
        3:  263:    initializeGame((int)(Random()*2.99999)+2,theKingdomCards,(int)(Random()*1000000),game);
        -:  264:
        -:  265:
        3:  266:    gamePrint(game);
        -:  267:
        -:  268:
        3:  269:    pos=-10000000;
330000006:  270:    while(pos<100000000){
330000000:  271:       pos++;
        -:  272:    }
        -:  273:
        -:  274:
      431:  275:    while(isGameOver(game)==0){
      425:  276:        pos=0;
4250000850:  277:	while(pos<10000000){
4250000000:  278:	   pos++;
        -:  279:	}
      425:  280:        printf("\n-----Next Turn-----");
      425:  281:        playATurn(game);
        -:  282:    }
        3:  283:    gamePrint(game);
        3:  284:    pos=0;
       87:  285:    while(pos<=treasure_map){
       81:  286:       printf("\n  %s: %d",sayCard(pos),supplyCount(pos,game));
       81:  287:       pos++;
        -:  288:    }
        3:  289:    free(game);
        -:  290:
        3:  291:}
        -:  292:
        -:  293:
        -:  294:
        3:  295:int main(int argc,char** argv){
        -:  296:
        3:  297:    PlantSeeds(atoi(argv[1]));
        3:  298:    playAGame();
        3:  299:    printf("\nGame completed\n");
        3:  300:    return 0;
        -:  301:
        -:  302:}
        -:  303:
        -:  304:
        -:  305:
        -:  306:
        -:  307:
