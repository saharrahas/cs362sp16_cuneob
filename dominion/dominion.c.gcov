        -:    0:Source:dominion.c
        -:    0:Graph:testdominion.gcno
        -:    0:Data:testdominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <time.h>
        -:    8:
     8346:    9:int compare(const void* a, const void* b) {
     8346:   10:  if (*(int*)a > *(int*)b)
     3967:   11:    return 1;
     4379:   12:  if (*(int*)a < *(int*)b)
     1440:   13:    return -1;
     2939:   14:  return 0;
        -:   15:}
        -:   16:
        3:   17:struct gameState* newGame() {
        3:   18:  struct gameState* g = malloc(sizeof(struct gameState));
        3:   19:  return g;
        -:   20:}
        -:   21:
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = (int*)malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
        -:   38:
     2602:   39:void getCount (struct gameState* game){
        -:   40:
     2602:   41:   int pos=0;
    12628:   42:   while(pos<game->numPlayers){
     7424:   43:      printf("\n    Player %d has %d cards",pos,game->handCount[pos]+game->deckCount[pos]+game->discardCount[pos]);
     7424:   44:      pos++;
        -:   45:   }
        -:   46:
     2602:   47:}
        -:   48:
        -:   49:
        -:   50:
        3:   51:int initializeGame(int numPlayers, int*  kingdomCards, int randomSeed,
        -:   52:		   struct gameState *state) {
        -:   53:
        -:   54:  int i;
        -:   55:  int j;
        -:   56:  int it;
        -:   57:  //set up random number generator
        3:   58:  SelectStream(1);
        3:   59:  PutSeed((long)randomSeed);
        -:   60:
        -:   61:  //check number of players
        3:   62:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   63:    {
    #####:   64:      return -1;
        -:   65:    }
        -:   66:
        -:   67:  //set number of players
        3:   68:  state->numPlayers = numPlayers;
        -:   69:
        -:   70:
        -:   71:  //check selected kingdom cards are different
       33:   72:  for (i = 0; i < 10; i++)
        -:   73:    {
       30:   74:      if(kingdomCards[i]<=province || kingdomCards[i]>treasure_map){
    #####:   75:	 return -1;
        -:   76:      }
      330:   77:      for (j = 0; j < 10; j++)
        -:   78:        {
      300:   79:	  if ( j != i && kingdomCards[j] == kingdomCards[i]  )
        -:   80:	    {
    #####:   81:	      return -1;
        -:   82:	    }
        -:   83:        }
        -:   84:    }
        -:   85:
        -:   86:
        -:   87:  //initialize supply
        -:   88:  ///////////////////////////////
        -:   89:
        -:   90:  //set number of Curse cards
        3:   91:  if (numPlayers == 2)
        -:   92:    {
        2:   93:      state->supplyCount[curse] = 10;
        -:   94:    }
        1:   95:  else if (numPlayers == 3)
        -:   96:    {
    #####:   97:      state->supplyCount[curse] = 20;
        -:   98:    }
        -:   99:  else
        -:  100:    {
        1:  101:      state->supplyCount[curse] = 30;
        -:  102:    }
        -:  103:
        -:  104:  //set number of Victory cards
        3:  105:  if (numPlayers == 2)
        -:  106:    {
        2:  107:      state->supplyCount[estate] = 8;
        2:  108:      state->supplyCount[duchy] = 8;
        2:  109:      state->supplyCount[province] = 8;
        -:  110:    }
        -:  111:  else
        -:  112:    {
        1:  113:      state->supplyCount[estate] = 12;
        1:  114:      state->supplyCount[duchy] = 12;
        1:  115:      state->supplyCount[province] = 12;
        -:  116:    }
        -:  117:
        -:  118:  //set number of Treasure cards
        3:  119:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  120:  state->supplyCount[silver] = 40;
        3:  121:  state->supplyCount[gold] = 30;
        -:  122:
        -:  123:  //set number of Kingdom cards
       63:  124:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  125:    {
      537:  126:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  127:	{
      501:  128:	  if (kingdomCards[j] == i)
        -:  129:	    {
        -:  130:	      //check if card is a 'Victory' Kingdom card
       24:  131:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  132:		{
        6:  133:		  if (numPlayers == 2){
        3:  134:		    state->supplyCount[i] = 8;
        -:  135:		  }
    #####:  136:		  else{ state->supplyCount[i] = 12; }
        -:  137:		}
        -:  138:	      else
        -:  139:		{
       21:  140:		  state->supplyCount[i] = 10;
        -:  141:		}
       24:  142:	      break;
        -:  143:	    }
        -:  144:	  else    //card is not in the set choosen for the game
        -:  145:	    {
      477:  146:	      state->supplyCount[i] = -1;
        -:  147:	    }
        -:  148:	}
        -:  149:
        -:  150:    }
        -:  151:
        -:  152:  ////////////////////////
        -:  153:  //supply intilization complete
        -:  154:
        -:  155:  //set player decks
       11:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
        8:  158:      state->deckCount[i] = 0;
       32:  159:      for (j = 0; j < 3; j++)
        -:  160:	{
       24:  161:	  state->deck[i][j] = estate;
       24:  162:	  state->deckCount[i]++;
        -:  163:	}
       64:  164:      for (j = 3; j < 10; j++)
        -:  165:	{
       56:  166:	  state->deck[i][j] = copper;
       56:  167:	  state->deckCount[i]++;
        -:  168:	}
        -:  169:    }
        -:  170:
        -:  171:  //shuffle player decks
       11:  172:  for (i = 0; i < numPlayers; i++)
        -:  173:    {
        8:  174:      if ( shuffle(i, state) < 0 )
        -:  175:	{
    #####:  176:	  return -1;
        -:  177:	}
        -:  178:    }
        -:  179:
        -:  180:  //draw player hands
       11:  181:  for (i = 0; i < numPlayers; i++)
        -:  182:    {
        -:  183:      //initialize hand size to zero
        8:  184:      state->handCount[i] = 0;
        8:  185:      state->discardCount[i] = 0;
        -:  186:      //draw 5 cards
        -:  187:      // for (j = 0; j < 5; j++)
        -:  188:      //	{
        -:  189:      //	  drawCard(i, state);
        -:  190:      //	}
        -:  191:    }
        -:  192:
        -:  193:  //set embargo tokens to 0 for all supply piles
       84:  194:  for (i = 0; i <= treasure_map; i++)
        -:  195:    {
       81:  196:      state->embargoTokens[i] = 0;
        -:  197:    }
        -:  198:
        -:  199:  //initialize first player's turn
        3:  200:  state->outpostPlayed = 0;
        3:  201:  state->phase = 0;
        3:  202:  state->numActions = 1;
        3:  203:  state->numBuys = 1;
        3:  204:  state->playedCardCount = 0;
        3:  205:  state->whoseTurn = 0;
        3:  206:  state->handCount[state->whoseTurn] = 0;
        -:  207:  //int it; move to top
        -:  208:
        -:  209:  //Moved draw cards to here, only drawing at the start of a turn
       18:  210:  for (it = 0; it < 5; it++){
       15:  211:    drawCard(state->whoseTurn, state);
        -:  212:  }
        -:  213:
        3:  214:  updateCoins(state->whoseTurn, state, 0);
        -:  215:
        3:  216:  return 0;
        -:  217:}
        -:  218:
      111:  219:int shuffle(int player, struct gameState *state) {
        -:  220:
        -:  221:
      111:  222:  printf("\nAttempting to shuffle. Count:");
      111:  223:  getCount(state);
        -:  224:  int newDeck[MAX_DECK];
      111:  225:  int newDeckPos = 0;
        -:  226:  int card;
        -:  227:  int i;
        -:  228:
      111:  229:  if (state->deckCount[player] < 1)
    #####:  230:    return -1;
      111:  231:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  232:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  233:
     2676:  234:  while (state->deckCount[player] > 0) {
     2454:  235:    card = floor(Random() * state->deckCount[player]);
     2454:  236:    newDeck[newDeckPos] = state->deck[player][card];
     2454:  237:    newDeckPos++;
    18588:  238:    for (i = card; i < state->deckCount[player]-1; i++) {
    16134:  239:      state->deck[player][i] = state->deck[player][i+1];
        -:  240:    }
     2454:  241:    state->deckCount[player]--;
        -:  242:  }
     2565:  243:  for (i = 0; i < newDeckPos; i++) {
     2454:  244:    state->deck[player][i] = newDeck[i];
     2454:  245:    state->deckCount[player]++;
        -:  246:  }
        -:  247:
      111:  248:  getCount(state);
      111:  249:  printf("------");
        -:  250:
      111:  251:  return 0;
        -:  252:}
        -:  253:
      332:  254:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  255:{
        -:  256:  int card;
      332:  257:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  258:
        -:  259:  //check if it is the right phase
      332:  260:  if (state->phase != 0)
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:
        -:  265:  //check if player has enough actions
      332:  266:  if ( state->numActions < 1 )
        -:  267:    {
    #####:  268:      return -1;
        -:  269:    }
        -:  270:
        -:  271:  //get card played
      332:  272:  card = handCard(handPos, state);
        -:  273:
        -:  274:  //check if selected card is an action
      332:  275:  if ( card < adventurer || card > treasure_map )
        -:  276:    {
    #####:  277:      return -1;
        -:  278:    }
        -:  279:
        -:  280:  //play card
      332:  281:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  282:    {
      250:  283:      return -1;
        -:  284:    }
        -:  285:
        -:  286:  //reduce number of actions
       82:  287:  state->numActions--;
        -:  288:
        -:  289:  //update coins (Treasure cards may be added with card draws)
       82:  290:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  291:
       82:  292:  return 0;
        -:  293:}
        -:  294:
     1476:  295:int buyCard(int supplyPos, struct gameState *state) {
        -:  296:  int who;
        -:  297:  if (DEBUG){
        -:  298:    printf("Entering buyCard...\n");
        -:  299:  }
        -:  300:
        -:  301:
        -:  302:  // I don't know what to do about the phase thing.
        -:  303:
     1476:  304:  who = state->whoseTurn;
        -:  305:
     1476:  306:  if (state->numBuys < 1){
        -:  307:    if (DEBUG)
        -:  308:      printf("You do not have any buys left\n");
    #####:  309:    return -1;
     1476:  310:  } else if (supplyCount(supplyPos, state) <1){
        -:  311:    if (DEBUG)
        -:  312:      printf("There are not any of that type of card left\n");
      662:  313:    return -1;
      814:  314:  } else if (state->coins < getCost(supplyPos)){
        -:  315:    if (DEBUG)
        -:  316:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
      389:  317:    return -1;
        -:  318:  } else {
      425:  319:    state->phase=1;
        -:  320:    //state->supplyCount[supplyPos]--;
      425:  321:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  322:
      425:  323:    state->coins = (state->coins) - (getCost(supplyPos));
      425:  324:    state->numBuys--;
        -:  325:    if (DEBUG)
        -:  326:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  327:  }
        -:  328:
        -:  329:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  330:  //state->discardCount[who]++;
        -:  331:  //
        -:  332:
      425:  333:  return 0;
        -:  334:}
        -:  335:
    #####:  336:int numHandCards(struct gameState *state) {
    #####:  337:  return state->handCount[ whoseTurn(state) ];
        -:  338:}
        -:  339:
      340:  340:int handCard(int handPos, struct gameState *state) {
      340:  341:  int currentPlayer = whoseTurn(state);
      340:  342:  return state->hand[currentPlayer][handPos];
        -:  343:}
        -:  344:
     2009:  345:int supplyCount(int card, struct gameState *state) {
        -:  346:
     2009:  347:   if(card<0 || card>treasure_map){
        3:  348:   	return -1;
        -:  349:   }
     2006:  350:  return state->supplyCount[card];
        -:  351:}
        -:  352:
    #####:  353:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  354:  int i;
    #####:  355:  int count = 0;
        -:  356:
    #####:  357:  for (i = 0; i < state->deckCount[player]; i++)
        -:  358:    {
    #####:  359:      if (state->deck[player][i] == card) count++;
        -:  360:    }
        -:  361:
    #####:  362:  for (i = 0; i < state->handCount[player]; i++)
        -:  363:    {
    #####:  364:      if (state->hand[player][i] == card) count++;
        -:  365:    }
        -:  366:
    #####:  367:  for (i = 0; i < state->discardCount[player]; i++)
        -:  368:    {
    #####:  369:      if (state->discard[player][i] == card) count++;
        -:  370:    }
        -:  371:
    #####:  372:  return count;
        -:  373:}
        -:  374:
     1097:  375:int whoseTurn(struct gameState *state) {
     1097:  376:  return state->whoseTurn;
        -:  377:}
        -:  378:
      425:  379:int endTurn(struct gameState *state) {
        -:  380:  int k;
        -:  381:  int i;
      425:  382:  int currentPlayer = whoseTurn(state);
        -:  383:
        -:  384:  
      425:  385:  printf("\nGoing to discard\n");
        -:  386:  
        -:  387:  //Discard hand
     2468:  388:  for (i = 0; i < state->handCount[currentPlayer]; i++){
     2043:  389:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
     2043:  390:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  391:  }
      425:  392:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  393:
      425:  394:  getCount(state);
      425:  395:  printf("\nGoing to draw cards");
        -:  396:
     2550:  397:  for(k=0; k<5; k++){
     2125:  398:     drawCard(currentPlayer,state);
        -:  399:  }
        -:  400:
      425:  401:  getCount(state);
      425:  402:  printf("\nChanging the player");
        -:  403:
        -:  404:  //Code for determining the player
      425:  405:  if (currentPlayer < (state->numPlayers - 1)){
      258:  406:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  407:  }
        -:  408:  else{
      167:  409:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  410:  }
        -:  411:
      425:  412:  state->outpostPlayed = 0;
      425:  413:  state->phase = 0;
      425:  414:  state->numActions = 1;
      425:  415:  state->coins = 0;
      425:  416:  state->numBuys = 1;
      425:  417:  state->playedCardCount = 0;
        -:  418:  //state->handCount[state->whoseTurn]=0;
        -:  419:
        -:  420:
      425:  421:  getCount(state);
      425:  422:  printf("\nUpdating the dank muns");
        -:  423:
        -:  424:  //Update money
      425:  425:  updateCoins(state->whoseTurn, state , 0);
        -:  426:
      425:  427:  return 0;
        -:  428:}
        -:  429:
      428:  430:int isGameOver(struct gameState *state) {
        -:  431:  int i;
        -:  432:  int j;
        -:  433:
        -:  434:  //if stack of Province cards is empty, the game ends
      428:  435:  if (state->supplyCount[province] == 0)
        -:  436:    {
    #####:  437:      return 1;
        -:  438:    }
        -:  439:
        -:  440:  //if three supply pile are at 0, the game ends
      428:  441:  j = 0;
    11128:  442:  for (i = 0; i < 25; i++)
        -:  443:    {
    10700:  444:      if (state->supplyCount[i] == 0)
        -:  445:	{
      246:  446:	  j++;
        -:  447:	}
        -:  448:    }
      428:  449:  if ( j >= 3)
        -:  450:    {
        3:  451:      return 1;
        -:  452:    }
        -:  453:
      425:  454:  return 0;
        -:  455:}
        -:  456:
    #####:  457:int scoreFor (int player, struct gameState *state) {
        -:  458:
        -:  459:  int i;
    #####:  460:  int score = 0;
        -:  461:  //score from hand
    #####:  462:  for (i = 0; i < state->handCount[player]; i++)
        -:  463:    {
    #####:  464:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  465:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  466:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  467:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  468:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  469:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  470:    }
        -:  471:
        -:  472:  //score from discard
    #####:  473:  for (i = 0; i < state->discardCount[player]; i++)
        -:  474:    {
    #####:  475:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  476:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  477:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  478:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  479:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  480:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  481:    }
        -:  482:
        -:  483:  //score from deck
    #####:  484:  for (i = 0; i < state->discardCount[player]; i++)
        -:  485:    {
    #####:  486:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  487:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  488:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  489:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  490:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  491:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  492:    }
        -:  493:
    #####:  494:  return score;
        -:  495:}
        -:  496:
    #####:  497:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  498:  int i;
        -:  499:  int j;
        -:  500:  int highScore;
        -:  501:  int currentPlayer;
        -:  502:
        -:  503:  //get score for each player
    #####:  504:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  505:    {
        -:  506:      //set unused player scores to -9999
    #####:  507:      if (i >= state->numPlayers)
        -:  508:	{
    #####:  509:	  players[i] = -9999;
        -:  510:	}
        -:  511:      else
        -:  512:	{
    #####:  513:	  players[i] = scoreFor (i, state);
        -:  514:	}
        -:  515:    }
        -:  516:
        -:  517:  //find highest score
    #####:  518:  j = 0;
    #####:  519:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  520:    {
    #####:  521:      if (players[i] > players[j])
        -:  522:	{
    #####:  523:	  j = i;
        -:  524:	}
        -:  525:    }
    #####:  526:  highScore = players[j];
        -:  527:
        -:  528:  //add 1 to players who had less turns
    #####:  529:  currentPlayer = whoseTurn(state);
    #####:  530:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  531:    {
    #####:  532:      if ( players[i] == highScore && i > currentPlayer )
        -:  533:	{
    #####:  534:	  players[i]++;
        -:  535:	}
        -:  536:    }
        -:  537:
        -:  538:  //find new highest score
    #####:  539:  j = 0;
    #####:  540:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  541:    {
    #####:  542:      if ( players[i] > players[j] )
        -:  543:	{
    #####:  544:	  j = i;
        -:  545:	}
        -:  546:    }
    #####:  547:  highScore = players[j];
        -:  548:
        -:  549:  //set winners in array to 1 and rest to 0
    #####:  550:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  551:    {
    #####:  552:      if ( players[i] == highScore )
        -:  553:	{
    #####:  554:	  players[i] = 1;
        -:  555:	}
        -:  556:      else
        -:  557:	{
    #####:  558:	  players[i] = 0;
        -:  559:	}
        -:  560:    }
        -:  561:
    #####:  562:  return 0;
        -:  563:}
        -:  564:
     2171:  565:int drawCard(int player, struct gameState *state)
        -:  566:{
        -:  567:
        -:  568:
        -:  569:  int count;
        -:  570:  int deckCounter;
     2171:  571:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  572:
        -:  573:    //Step 1 Shuffle the discard pile back into a deck
        -:  574:    int i;
        -:  575:    //Move discard to deck
     2477:  576:    for (i = 0; i < state->discardCount[player];i++){
     2374:  577:      state->deck[player][i] = state->discard[player][i];
     2374:  578:      state->discard[player][i] = -1;
        -:  579:    }
        -:  580:
      103:  581:    state->deckCount[player] = state->discardCount[player];
      103:  582:    state->discardCount[player] = 0;//Reset discard
        -:  583:
        -:  584:    //Shufffle the deck
      103:  585:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  586:
        -:  587:    if (DEBUG){//Debug statements
        -:  588:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  589:    }
        -:  590:
      103:  591:    state->discardCount[player] = 0;
        -:  592:
        -:  593:    //Step 2 Draw Card
      103:  594:    count = state->handCount[player];//Get current player's hand count
        -:  595:
        -:  596:    if (DEBUG){//Debug statements
        -:  597:      printf("Current hand count: %d\n", count);
        -:  598:    }
        -:  599:
      103:  600:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  601:
      103:  602:    if (deckCounter == 0){
    #####:  603:      return -1;
        -:  604:    }
        -:  605:
      103:  606:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      103:  607:    state->deckCount[player]--;
      103:  608:    state->handCount[player]++;//Increment hand count
        -:  609:  }
        -:  610:
        -:  611:  else{
     2068:  612:    int count = state->handCount[player];//Get current hand count for player
        -:  613:    int deckCounter;
        -:  614:    if (DEBUG){//Debug statements
        -:  615:      printf("Current hand count: %d\n", count);
        -:  616:    }
        -:  617:
     2068:  618:    deckCounter = state->deckCount[player];//Create holder for the deck count
     2068:  619:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     2068:  620:    state->deckCount[player]--;
     2068:  621:    state->handCount[player]++;//Increment hand count
        -:  622:  }
        -:  623:
     2171:  624:  return 0;
        -:  625:}
        -:  626:
     1251:  627:int getCost(int cardNumber)
        -:  628:{
     1251:  629:  switch( cardNumber )
        -:  630:    {
        -:  631:    case curse:
       76:  632:      return 0;
        -:  633:    case estate:
       41:  634:      return 2;
        -:  635:    case duchy:
       41:  636:      return 5;
        -:  637:    case province:
       33:  638:      return 8;
        -:  639:    case copper:
       75:  640:      return 0;
        -:  641:    case silver:
      314:  642:      return 3;
        -:  643:    case gold:
      379:  644:      return 6;
        -:  645:    case adventurer:
    #####:  646:      return 6;
        -:  647:    case council_room:
       31:  648:      return 5;
        -:  649:    case feast:
    #####:  650:      return 4;
        -:  651:    case gardens:
       16:  652:      return 4;
        -:  653:    case mine:
       22:  654:      return 5;
        -:  655:    case remodel:
        4:  656:      return 4;
        -:  657:    case smithy:
    #####:  658:      return 4;
        -:  659:    case village:
        9:  660:      return 3;
        -:  661:    case baron:
       22:  662:      return 4;
        -:  663:    case great_hall:
        4:  664:      return 3;
        -:  665:    case minion:
    #####:  666:      return 5;
        -:  667:    case steward:
        6:  668:      return 3;
        -:  669:    case tribute:
    #####:  670:      return 5;
        -:  671:    case ambassador:
       31:  672:      return 3;
        -:  673:    case cutpurse:
       58:  674:      return 4;
        -:  675:    case embargo:
       12:  676:      return 2;
        -:  677:    case outpost:
       13:  678:      return 5;
        -:  679:    case salvager:
       18:  680:      return 4;
        -:  681:    case sea_hag:
       34:  682:      return 4;
        -:  683:    case treasure_map:
       11:  684:      return 4;
        -:  685:    }
        -:  686:
        1:  687:  return -1;
        -:  688:}
        -:  689:
        -:  690:
        -:  691:
        -:  692:
    #####:  693:int adventurer_effect (int currentPlayer, struct gameState* state){
        -:  694:
    #####:  695:    int z=0;
        -:  696:    int cardDrawn;
    #####:  697:    int drawntreasure=0;
        -:  698:    int temphand[MAX_HAND];
    #####:  699:    while(drawntreasure<2){
        -:  700:
    #####:  701:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  702:            shuffle(currentPlayer, state);
        -:  703:        }
        -:  704:
    #####:  705:        drawCard(currentPlayer, state);
    #####:  706:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  707:
    #####:  708:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
    #####:  709:            drawntreasure++;
        -:  710:        }
        -:  711:        else{
    #####:  712:            temphand[z]=cardDrawn;
    #####:  713:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  714:            z++;
        -:  715:        }
        -:  716:
        -:  717:    }
        -:  718:
    #####:  719:    while(z-1>=0){
    #####:  720:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  721:        z=z-1;
        -:  722:    }
        -:  723:
    #####:  724:    return 0;
        -:  725:
        -:  726:}
        -:  727:
        -:  728:
        -:  729:////////// 8U6
        7:  730:int council_room_effect(int currentPlayer, struct gameState* state, int handPos){
        -:  731:
        -:  732:    int i;
        -:  733:    //+4 Cards
       28:  734:    for (i = 0; i < 3; i++){
       21:  735:        drawCard(currentPlayer, state);
        -:  736:    }
        -:  737:
        -:  738:    //+1 Buy
        7:  739:    state->numBuys++;
        -:  740:
        -:  741:    //Each other player draws a card
       29:  742:    for (i = 0; i < state->numPlayers; i++){
       22:  743:        if ( i == currentPlayer ){
        7:  744:            drawCard(i, state);
        -:  745:        }
        -:  746:    }
        -:  747:
        -:  748:    //put played card in played card pile
        7:  749:    discardCard(handPos, currentPlayer, state, 0);
        -:  750:
        7:  751:    return 0;
        -:  752:
        -:  753:}
        -:  754:
        -:  755:
    #####:  756:int feast_effect(int currentPlayer, struct gameState* state, int choice1){
        -:  757:
        -:  758:
        -:  759:    int i;
        -:  760:    int temphand[MAX_HAND];
        -:  761:    //gain card with cost up to 5
        -:  762:    //Backup hand
    #####:  763:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  764:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  765:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  766:    }
        -:  767:    //Backup hand
        -:  768:
        -:  769:    //Update Coins for Buy
    #####:  770:    updateCoins(currentPlayer, state, 5);
    #####:  771:    int x = 1;//Condition to loop on
    #####:  772:    while( x == 1) {//Buy one card
    #####:  773:        if (supplyCount(choice1, state) <= 0){
        -:  774:            if (DEBUG){
        -:  775:                printf("None of that card left, sorry!\n");
        -:  776:            }
        -:  777:
        -:  778:            if (DEBUG){
        -:  779:                printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  780:            }
        -:  781:        }
    #####:  782:        else if (state->coins < getCost(choice1)){
    #####:  783:            printf("That card is too expensive!\n");
        -:  784:
        -:  785:            if (DEBUG){
        -:  786:                printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  787:            }
        -:  788:        }
        -:  789:        else{
        -:  790:
        -:  791:            if (DEBUG){
        -:  792:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  793:            }
        -:  794:
    #####:  795:            gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  796:            x = 0;//No more buying cards
        -:  797:
        -:  798:            if (DEBUG){
        -:  799:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  800:            }
        -:  801:
        -:  802:        }
        -:  803:    }
        -:  804:
        -:  805:    //Reset Hand
    #####:  806:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  807:        state->hand[currentPlayer][i] = temphand[i];
    #####:  808:        temphand[i] = -1;
        -:  809:    }
        -:  810:    //Reset Hand
        -:  811:
    #####:  812:    return 0;
        -:  813:
        -:  814:
        -:  815:}
        -:  816:
       75:  817:int gardens_effect(){
        -:  818:
       75:  819:    return -1;
        -:  820:
        -:  821:}
        -:  822:
        -:  823://///////// 8U6
       79:  824:int mine_effect(int currentPlayer, struct gameState* state, int handPos, int choice1, int choice2){
        -:  825:
        -:  826:    int i;
       79:  827:    int j = state->hand[currentPlayer][choice2];  //store card we will trash
        -:  828:
       79:  829:    if (state->hand[currentPlayer+1%2][choice2] < copper || state->hand[currentPlayer%2][choice2] > gold){
       78:  830:        return -1;
        -:  831:    }
        -:  832:
        1:  833:    if (choice1 > treasure_map || choice1 < curse){
    #####:  834:        return -1;
        -:  835:    }
        -:  836:
        -:  837:
        1:  838:    i=choice1;
        1:  839:    choice1=choice2;
        1:  840:    choice2=i;
        -:  841:
        -:  842:
        1:  843:    if ( (getCost(state->hand[currentPlayer][choice2]) + 3) > getCost(choice1) ){
    #####:  844:        return -1;
        -:  845:    }
        -:  846:
        1:  847:    gainCard(choice2, state, 2, currentPlayer);
        -:  848:
        -:  849:    //discard card from hand
        1:  850:    discardCard(handPos, currentPlayer, state, 0);
        -:  851:
        -:  852:    //discard trashed card
        6:  853:    for (i = 0; i < state->handCount[currentPlayer]; i++){
        5:  854:        if (state->hand[currentPlayer][i] == j){
    #####:  855:            discardCard(i, currentPlayer, state, 0);
    #####:  856:            break;
        -:  857:        }
        -:  858:    }
        -:  859:
        1:  860:    return 0;
        -:  861:
        -:  862:}
        -:  863:
        -:  864:
        -:  865://///////// 8U6
        1:  866:int remodel_effect(int currentPlayer, struct gameState* state, int handPos, int choice1, int choice2){
        -:  867:
        -:  868:    int i;
        1:  869:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  870:
        1:  871:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ){
    #####:  872:        return -1;
        -:  873:    }
        -:  874:
        1:  875:    gainCard(choice2, state, 0, currentPlayer);
        -:  876:
        -:  877:    //discard card from hand
        1:  878:    discardCard(handPos, currentPlayer, state, 0);
        -:  879:
        -:  880:    //discard trashed card
        5:  881:    for (i = 0; i < state->handCount[currentPlayer]; i++){
        4:  882:        if (state->hand[currentPlayer][i] == j){
    #####:  883:            discardCard(i--, currentPlayer, state, 0);
        -:  884:        }
        -:  885:    }
        -:  886:
        1:  887:    return 0;
        -:  888:
        -:  889:
        -:  890:}
        -:  891:
        -:  892:
        -:  893:
    #####:  894:int smithy_effect(int currentPlayer, struct gameState* state, int handPos){
        -:  895:
        -:  896:    //+3 Cards
        -:  897:    int i;
    #####:  898:    for (i = 0; i < 3; i++){
    #####:  899:       if(drawCard(currentPlayer, state)==-1){
    #####:  900:          return -1;
        -:  901:       }
        -:  902:    }
        -:  903:
        -:  904:    //discard card from hand
    #####:  905:    discardCard(handPos, currentPlayer, state, 0);
    #####:  906:    return 0;
        -:  907:
        -:  908:}
        -:  909:
        -:  910:
        2:  911:int village_effect(int currentPlayer, struct gameState* state, int handPos){
        -:  912:
        -:  913:    //+1 Card
        2:  914:    drawCard(currentPlayer, state);
        -:  915:
        -:  916:    //+2 Actions
        2:  917:    state->numActions = state->numActions + 2;
        -:  918:
        -:  919:    //discard played card from hand
        2:  920:    discardCard(handPos, currentPlayer, state, 0);
        2:  921:    return 0;
        -:  922:
        -:  923:}
        -:  924:
        -:  925:
        -:  926:
        9:  927:int baron_effect(int currentPlayer, struct gameState* state, int choice1){
        -:  928:
        9:  929:    state->numBuys++;//Increase buys by 1!
        9:  930:    if (choice1 > 0){//Boolean true or going to discard an estate
        9:  931:        int p = 0;//Iterator for hand!
        9:  932:        int card_not_discarded = 1;//Flag for discard set!
       60:  933:        while(card_not_discarded){
       42:  934:            if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        5:  935:                state->coins += 4;//Add 4 coins to the amount of coins
        5:  936:                state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        5:  937:                state->discardCount[currentPlayer]++;
       21:  938:                for (;p < state->handCount[currentPlayer]; p++){
       16:  939:                    state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  940:                }
        5:  941:                state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        5:  942:                state->handCount[currentPlayer]--;
        5:  943:                card_not_discarded = 0;//Exit the loop
        -:  944:            }
       37:  945:            else if (p > state->handCount[currentPlayer]){
        -:  946:                if(DEBUG) {
        -:  947:                    printf("No estate cards in your hand, invalid choice\n");
        -:  948:                    printf("Must gain an estate if there are any\n");
        -:  949:                }
        4:  950:                if (supplyCount(estate, state) > 0){
        3:  951:                    gainCard(estate, state, 0, currentPlayer);
        3:  952:                    state->supplyCount[estate]--;//Decrement estates
        3:  953:                    if (supplyCount(estate, state) == 0){
    #####:  954:                        isGameOver(state);
        -:  955:                    }
        -:  956:                }
        4:  957:                card_not_discarded = 0;//Exit the loop
        -:  958:            }
        -:  959:
        -:  960:            else{
       33:  961:                p++;//Next card
        -:  962:            }
        -:  963:        }
        -:  964:    }
        -:  965:
        -:  966:    else{
    #####:  967:        if (supplyCount(estate, state) > 0){
    #####:  968:            gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  969:            state->supplyCount[estate]--;//Decrement Estates
    #####:  970:            if (supplyCount(estate, state) == 0){
    #####:  971:                isGameOver(state);
        -:  972:            }
        -:  973:        }
        -:  974:    }
        -:  975:
        -:  976:
        9:  977:    return 0;
        -:  978:
        -:  979:}
        -:  980:
        -:  981:
        1:  982:int great_hall_effect(int currentPlayer, struct gameState* state, int handPos){
        -:  983:
        -:  984:    //+1 Card
        1:  985:    drawCard(currentPlayer, state);
        -:  986:
        -:  987:    //+1 Actions
        1:  988:    state->numActions++;
        -:  989:
        -:  990:    //discard card from hand
        1:  991:    discardCard(handPos, currentPlayer, state, 0);
        1:  992:    return 0;
        -:  993:
        -:  994:}
        -:  995:
        -:  996:
    #####:  997:int minion_effect(int currentPlayer, struct gameState* state, int handPos, int choice1,int choice2){
        -:  998:
        -:  999:    int i;
        -: 1000:    int j;
        -: 1001:    //+1 action
    #####: 1002:    state->numActions++;
        -: 1003:
        -: 1004:    //discard card from hand
    #####: 1005:    discardCard(handPos, currentPlayer, state, 0);
        -: 1006:
    #####: 1007:    if (choice1){//+2 coins
    #####: 1008:        state->coins = state->coins + 2;
        -: 1009:    }
        -: 1010:
    #####: 1011:    else if (choice2){		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1012:        //discard hand
    #####: 1013:        while(numHandCards(state) > 0){
    #####: 1014:            discardCard(handPos, currentPlayer, state, 0);
        -: 1015:        }
        -: 1016:
        -: 1017:        //draw 4
    #####: 1018:        for (i = 0; i < 4; i++){
    #####: 1019:            drawCard(currentPlayer, state);
        -: 1020:        }
        -: 1021:
        -: 1022:        //other players discard hand and redraw if hand size > 4
    #####: 1023:        for (i = 0; i < state->numPlayers; i++){
    #####: 1024:            if (i != currentPlayer){
    #####: 1025:                if ( state->handCount[i] > 4 ){
        -: 1026:                    //discard hand
    #####: 1027:                    while( state->handCount[i] > 0 ){
    #####: 1028:                        discardCard(handPos, i, state, 0);
        -: 1029:                    }
        -: 1030:
        -: 1031:                    //draw 4
    #####: 1032:                    for (j = 0; j < 4; j++){
    #####: 1033:                        drawCard(i, state);
        -: 1034:                    }
        -: 1035:                }
        -: 1036:            }
        -: 1037:        }
        -: 1038:
        -: 1039:    }
    #####: 1040:    return 0;
        -: 1041:
        -: 1042:}
        -: 1043:
        -: 1044:
        3: 1045:int steward_effect(int currentPlayer, struct gameState* state, int handPos, int choice1, int choice2, int choice3){
        -: 1046:
        3: 1047:    if (choice1 == 1){
        -: 1048:        //+2 cards
    #####: 1049:        drawCard(currentPlayer, state);
    #####: 1050:        drawCard(currentPlayer, state);
        -: 1051:    }
        3: 1052:    else if (choice1 == 2){
        -: 1053:        //+2 coins
        3: 1054:        state->coins = state->coins + 2;
        -: 1055:    }
        -: 1056:    else{
        -: 1057:        //trash 2 cards in hand
    #####: 1058:        discardCard(choice2, currentPlayer, state, 1);
    #####: 1059:        discardCard(choice3, currentPlayer, state, 1);
        -: 1060:    }
        -: 1061:
        -: 1062:    //discard card from hand
        3: 1063:    discardCard(handPos, currentPlayer, state, 0);
        3: 1064:    return 0;
        -: 1065:
        -: 1066:
        -: 1067:}
        -: 1068:
        -: 1069:/**
        -: 1070:int tribute_effect(){
        -: 1071:
        -: 1072:
        -: 1073:
        -: 1074:}
        -: 1075:
        -: 1076:
        -: 1077:int ambassador_effect(){
        -: 1078:
        -: 1079:
        -: 1080:
        -: 1081:}
        -: 1082:
        -: 1083:
        -: 1084:int cutpurse_effect(){
        -: 1085:
        -: 1086:
        -: 1087:
        -: 1088:}
        -: 1089:
        -: 1090:
        -: 1091:int embargo_effect(){
        -: 1092:
        -: 1093:
        -: 1094:
        -: 1095:
        -: 1096:}
        -: 1097:
        -: 1098:
        -: 1099:int outpost_effect(){
        -: 1100:
        -: 1101:
        -: 1102:
        -: 1103:}
        -: 1104:
        -: 1105:
        -: 1106:int salvager_effect(){
        -: 1107:
        -: 1108:
        -: 1109:
        -: 1110:}
        -: 1111:
        -: 1112:
        -: 1113:int sea_hag_effect(){
        -: 1114:
        -: 1115:
        -: 1116:
        -: 1117:}
        -: 1118:
        -: 1119:
        -: 1120:int treasure_map_effect(){
        -: 1121:
        -: 1122:
        -: 1123:
        -: 1124:}
        -: 1125:**/
        -: 1126:
        -: 1127:
        -: 1128:
        -: 1129:
        -: 1130:
      332: 1131:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -: 1132:{
        -: 1133:  int i;
        -: 1134:  int j;
        -: 1135:  int k;
        -: 1136:  int index;
      332: 1137:  int currentPlayer = whoseTurn(state);
      332: 1138:  int nextPlayer = currentPlayer + 1;
        -: 1139:
      332: 1140:  int tributeRevealedCards[2] = {-1, -1};
        -: 1141:
      332: 1142:  if (nextPlayer > (state->numPlayers - 1)){
      118: 1143:    nextPlayer = 0;
        -: 1144:  }
        -: 1145:
        -: 1146:
        -: 1147:  //uses switch to select card and perform actions
      332: 1148:  switch( card ){
        -: 1149:    case adventurer:
        -: 1150:
    #####: 1151:        return adventurer_effect(currentPlayer,state);
        -: 1152:
        -: 1153:    case council_room:
        -: 1154:
        7: 1155:        return council_room_effect(currentPlayer,state,handPos);
        -: 1156:
        -: 1157:    case feast:
        -: 1158:
    #####: 1159:        return feast_effect(currentPlayer,state,choice1);
        -: 1160:
        -: 1161:    case gardens:
        -: 1162:
       75: 1163:        return gardens_effect();
        -: 1164:
        -: 1165:    case mine:
        -: 1166:
       79: 1167:        return mine_effect(currentPlayer,state,handPos,choice1,choice2);
        -: 1168:
        -: 1169:    case remodel:
        -: 1170:
        1: 1171:        return remodel_effect(currentPlayer,state,handPos,choice1,choice2);
        -: 1172:
        -: 1173:    case smithy:
        -: 1174:
    #####: 1175:        return smithy_effect(currentPlayer,state,handPos);
        -: 1176:
        -: 1177:    case village:
        -: 1178:
        2: 1179:        return village_effect(currentPlayer,state,handPos);
        -: 1180:
        -: 1181:    case baron:
        -: 1182:
        9: 1183:        return baron_effect(currentPlayer,state,choice1);
        -: 1184:
        -: 1185:    case great_hall:
        -: 1186:
        1: 1187:        return great_hall_effect(currentPlayer,state,handPos);
        -: 1188:
        -: 1189:    case minion:
        -: 1190:
    #####: 1191:        return minion_effect(currentPlayer,state,handPos,choice1,choice2);
        -: 1192:
        -: 1193:    case steward:
        -: 1194:
        3: 1195:        return steward_effect(currentPlayer,state,handPos,choice1,choice2,choice3);
        -: 1196:
        -: 1197:    case tribute:
    #####: 1198:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1199:	if (state->deckCount[nextPlayer] > 0){
    #####: 1200:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1201:	  state->deckCount[nextPlayer]--;
        -: 1202:	}
    #####: 1203:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1204:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1205:	  state->discardCount[nextPlayer]--;
        -: 1206:	}
        -: 1207:	else{
        -: 1208:	  //No Card to Reveal
        -: 1209:	  if (DEBUG){
        -: 1210:	    printf("No cards to reveal\n");
        -: 1211:	  }
        -: 1212:	}
        -: 1213:      }
        -: 1214:
        -: 1215:      else{
    #####: 1216:	if (state->deckCount[nextPlayer] == 0){
    #####: 1217:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1218:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1219:	    state->deckCount[nextPlayer]++;
    #####: 1220:	    state->discard[nextPlayer][i] = -1;
    #####: 1221:	    state->discardCount[nextPlayer]--;
        -: 1222:	  }
        -: 1223:
    #####: 1224:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1225:	}
    #####: 1226:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1227:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1228:	state->deckCount[nextPlayer]--;
    #####: 1229:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1230:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1231:	state->deckCount[nextPlayer]--;
        -: 1232:      }
        -: 1233:
    #####: 1234:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1235:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1236:	state->playedCardCount++;
    #####: 1237:	tributeRevealedCards[1] = -1;
        -: 1238:      }
        -: 1239:
    #####: 1240:      for (i = 0; i <= 2; i ++){
    #####: 1241:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1242:	  state->coins += 2;
        -: 1243:	}
        -: 1244:
    #####: 1245:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1246:	  drawCard(currentPlayer, state);
    #####: 1247:	  drawCard(currentPlayer, state);
        -: 1248:	}
        -: 1249:	else{//Action Card
    #####: 1250:	  state->numActions = state->numActions + 2;
        -: 1251:	}
        -: 1252:      }
        -: 1253:
    #####: 1254:      return 0;
        -: 1255:
        -: 1256:    case ambassador:
       12: 1257:      j = 0;		//used to check if player has enough cards to discard
        -: 1258:
       12: 1259:      if (choice2 > 2 || choice2 < 0)
        -: 1260:	{
    #####: 1261:	  return -1;
        -: 1262:	}
        -: 1263:
       12: 1264:      if (choice1 == handPos)
        -: 1265:	{
        2: 1266:	  return -1;
        -: 1267:	}
        -: 1268:
       60: 1269:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1270:	{
       50: 1271:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1272:	    {
        5: 1273:	      j++;
        -: 1274:	    }
        -: 1275:	}
       10: 1276:      if (j < choice2)
        -: 1277:	{
        3: 1278:	  return -1;
        -: 1279:	}
        -: 1280:
        -: 1281:      if (DEBUG)
        -: 1282:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1283:
        -: 1284:      //increase supply count for choosen card by amount being discarded
        7: 1285:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1286:
        -: 1287:      //each other player gains a copy of revealed card
       29: 1288:      for (i = 0; i < state->numPlayers; i++)
        -: 1289:	{
       22: 1290:	  if (i != currentPlayer)
        -: 1291:	    {
       15: 1292:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1293:	    }
        -: 1294:	}
        -: 1295:
        -: 1296:      //discard played card from hand
        7: 1297:      discardCard(handPos, currentPlayer, state, 0);
        -: 1298:
        -: 1299:      //trash copies of cards returned to supply
       10: 1300:      for (j = 0; j < choice2; j++)
        -: 1301:	{
       10: 1302:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1303:	    {
        9: 1304:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1305:		{
        2: 1306:		  discardCard(i, currentPlayer, state, 1);
        2: 1307:		  break;
        -: 1308:		}
        -: 1309:	    }
        -: 1310:	}
        -: 1311:
        7: 1312:      return 0;
        -: 1313:
        -: 1314:    case cutpurse:
        -: 1315:
       15: 1316:      updateCoins(currentPlayer, state, 2);
       55: 1317:      for (i = 0; i < state->numPlayers; i++)
        -: 1318:	{
       40: 1319:	  if (i != currentPlayer)
        -: 1320:	    {
       86: 1321:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1322:		{
       80: 1323:		  if (state->hand[i][j] == copper)
        -: 1324:		    {
       19: 1325:		      discardCard(j, i, state, 0);
       19: 1326:		      break;
        -: 1327:		    }
       61: 1328:		  if (j == state->handCount[i])
        -: 1329:		    {
    #####: 1330:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1331:			{
        -: 1332:			  if (DEBUG)
        -: 1333:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1334:			}
    #####: 1335:		      break;
        -: 1336:		    }
        -: 1337:		}
        -: 1338:
        -: 1339:	    }
        -: 1340:
        -: 1341:	}
        -: 1342:
        -: 1343:      //discard played card from hand
       15: 1344:      discardCard(handPos, currentPlayer, state, 0);
        -: 1345:
       15: 1346:      return 0;
        -: 1347:
        -: 1348:
        -: 1349:    case embargo:
        -: 1350:      //+2 Coins
        8: 1351:      state->coins = state->coins + 2;
        -: 1352:
        -: 1353:      //see if selected pile is in play
        8: 1354:      if ( state->supplyCount[choice1] == -1 )
        -: 1355:	{
        2: 1356:	  return -1;
        -: 1357:	}
        -: 1358:
        -: 1359:      //add embargo token to selected supply pile
        6: 1360:      state->embargoTokens[choice1]++;
        -: 1361:
        -: 1362:      //trash card
        6: 1363:      discardCard(handPos, currentPlayer, state, 1);
        6: 1364:      return 0;
        -: 1365:
        -: 1366:    case outpost:
        -: 1367:      //set outpost flag
        1: 1368:      state->outpostPlayed++;
        -: 1369:
        -: 1370:      //discard card
        1: 1371:      discardCard(handPos, currentPlayer, state, 0);
        1: 1372:      return 0;
        -: 1373:
        -: 1374:    case salvager:
        -: 1375:      //+1 buy
        9: 1376:      state->numBuys++;
        -: 1377:
        9: 1378:      if (choice1)
        -: 1379:	{
        -: 1380:	  //gain coins equal to trashed card
        8: 1381:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1382:	  //trash card
        8: 1383:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1384:	}
        -: 1385:
        -: 1386:      //discard card
        9: 1387:      discardCard(handPos, currentPlayer, state, 0);
        9: 1388:      return 0;
        -: 1389:
        -: 1390:    case sea_hag:
       84: 1391:      for (i = 0; i < state->numPlayers; i++){
       64: 1392:	if (i != currentPlayer){
       44: 1393:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
       44: 1394:	  state->discardCount[i]++;
       44: 1395:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1396:	}
        -: 1397:      }
       20: 1398:      return 0;
        -: 1399:
        -: 1400:    case treasure_map:
        -: 1401:      //search hand for another treasure_map
       90: 1402:      index = -1;
      530: 1403:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1404:	{
      440: 1405:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1406:	    {
    #####: 1407:	      index = i;
    #####: 1408:	      break;
        -: 1409:	    }
        -: 1410:	}
       90: 1411:      if (index > -1)
        -: 1412:	{
        -: 1413:	  //trash both treasure cards
    #####: 1414:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1415:	  discardCard(index, currentPlayer, state, 1);
        -: 1416:
        -: 1417:	  //gain 4 Gold cards
    #####: 1418:	  for (i = 0; i < 4; i++)
        -: 1419:	    {
    #####: 1420:	      gainCard(gold, state, 1, currentPlayer);
        -: 1421:	    }
        -: 1422:
        -: 1423:	  //return success
    #####: 1424:	  return 1;
        -: 1425:	}
        -: 1426:
        -: 1427:      //no second treasure_map found in hand
       90: 1428:      return -1;
        -: 1429:    }
        -: 1430:
    #####: 1431:  return -1;
        -: 1432:}
        -: 1433:
       82: 1434:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1435:{
        -: 1436:
        -: 1437:  //if card is not trashed, added to Played pile
       82: 1438:  if (trashFlag < 1)
        -: 1439:    {
        -: 1440:      //add card to played pile
       66: 1441:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       66: 1442:      state->playedCardCount++;
        -: 1443:    }
        -: 1444:
        -: 1445:  //set played card to -1
       82: 1446:  state->hand[currentPlayer][handPos] = -1;
        -: 1447:
        -: 1448:  //remove card from player's hand
       82: 1449:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1450:    {
        -: 1451:      //reduce number of cards in hand
       10: 1452:      state->handCount[currentPlayer]--;
        -: 1453:    }
       72: 1454:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1455:    {
        -: 1456:      //reduce number of cards in hand
    #####: 1457:      state->handCount[currentPlayer]--;
        -: 1458:    }
        -: 1459:  else
        -: 1460:    {
        -: 1461:      //replace discarded card with last card in hand
       72: 1462:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1463:      //set last card to -1
       72: 1464:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1465:      //reduce number of cards in hand
       72: 1466:      state->handCount[currentPlayer]--;
        -: 1467:    }
        -: 1468:
       82: 1469:  return 0;
        -: 1470:}
        -: 1471:
      445: 1472:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1473:{
        -: 1474:  //Note: supplyPos is enum of choosen card
        -: 1475:
        -: 1476:  //check if supply pile is empty (0) or card is not used in game (-1)
      445: 1477:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1478:    {
        4: 1479:      return -1;
        -: 1480:    }
        -: 1481:
        -: 1482:  //added card for [whoseTurn] current player:
        -: 1483:  // toFlag = 0 : add to discard
        -: 1484:  // toFlag = 1 : add to deck
        -: 1485:  // toFlag = 2 : add to hand
        -: 1486:
      441: 1487:  if (toFlag == 1)
        -: 1488:    {
    #####: 1489:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1490:      state->deckCount[player]++;
        -: 1491:    }
      441: 1492:  else if (toFlag == 2)
        -: 1493:    {
        1: 1494:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1495:      state->handCount[player]++;
        -: 1496:    }
        -: 1497:  else
        -: 1498:    {
      440: 1499:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      440: 1500:      state->discardCount[player]++;
        -: 1501:    }
        -: 1502:
        -: 1503:  //decrease number in supply pile
      441: 1504:  state->supplyCount[supplyPos]--;
        -: 1505:
      441: 1506:  return 0;
        -: 1507:}
        -: 1508:
      525: 1509:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1510:{
        -: 1511:  int i;
        -: 1512:
        -: 1513:  //reset coin count
      525: 1514:  state->coins = 0;
        -: 1515:
        -: 1516:  //add coins for each Treasure card in player's hand
     3067: 1517:  for (i = 0; i < state->handCount[player]; i++)
        -: 1518:    {
     2542: 1519:      if (state->hand[player][i] == copper)
        -: 1520:	{
      717: 1521:	  state->coins += 1;
        -: 1522:	}
     1825: 1523:      else if (state->hand[player][i] == silver)
        -: 1524:	{
      725: 1525:	  state->coins += 2;
        -: 1526:	}
     1100: 1527:      else if (state->hand[player][i] == gold)
        -: 1528:	{
      272: 1529:	  state->coins += 3;
        -: 1530:	}
        -: 1531:    }
        -: 1532:
        -: 1533:  //add bonus
      525: 1534:  state->coins += bonus;
        -: 1535:
      525: 1536:  return 0;
        -: 1537:}
        -: 1538:
        -: 1539:
        -: 1540://end of dominion.c
        -: 1541:
