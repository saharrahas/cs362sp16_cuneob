

 Unit Test 1 ---------------
PASSED: initializeGame returns an error when given a bad number of players (1)
PASSED: initializeGame returns an error when given a bad number of players (5)
PASSED: initializeGame returns an error when given duplicate cards
PASSED: initializeGame returns an error when given a bad card
PASSED: initializeGame does not return an error when given valid input
PASSED: initializeGame made there be 2 players when it should have
PASSED: initializeGame inserted the proper number of cards of type0
PASSED: initializeGame inserted the proper number of cards of type1
PASSED: initializeGame inserted the proper number of cards of type2
PASSED: initializeGame inserted the proper number of cards of type3
PASSED: initializeGame inserted the proper number of cards of type4
PASSED: initializeGame inserted the proper number of cards of type5
PASSED: initializeGame inserted the proper number of cards of type6
PASSED: initializeGame inserted the proper number of cards of type7
PASSED: initializeGame inserted the proper number of cards of type8
PASSED: initializeGame inserted the proper number of cards of type9
PASSED: initializeGame inserted the proper number of cards of type10
PASSED: initializeGame inserted the proper number of cards of type11
PASSED: initializeGame inserted the proper number of cards of type12
PASSED: initializeGame inserted the proper number of cards of type13
PASSED: initializeGame inserted the proper number of cards of type14
PASSED: initializeGame inserted the proper number of cards of type15
PASSED: initializeGame inserted the proper number of cards of type16
PASSED: initializeGame inserted the proper number of cards of type17
PASSED: initializeGame inserted the proper number of cards of type18
PASSED: initializeGame inserted the proper number of cards of type19
PASSED: initializeGame inserted the proper number of cards of type20
PASSED: initializeGame inserted the proper number of cards of type21
PASSED: initializeGame inserted the proper number of cards of type22
PASSED: initializeGame inserted the proper number of cards of type23
PASSED: initializeGame inserted the proper number of cards of type24
PASSED: initializeGame inserted the proper number of cards of type25
PASSED: initializeGame inserted the proper number of cards of type26

 Unit Test 2 ----------------
PASSED: supplyCount gave an accurate count after initialization
PASSED: supplyCount gave an accurate count after modification of supply
PASSED: supplyCount gave an error code when negative index is supplied
PASSED: supplyCount gave an error code when an overly large index is supplied

 Unit Test 3 ----------------
PASSED: endTurn increments the whoseTurn value forward
PASSED: endTurn increments the whoseTurn value forward
FAILED: endTurn fails to result in a new hand)
PASSED: endTurn loops back to first player from last player

 Unit Test 4 ----------------
PASSED: buyCard does not return an error code for a basic buy
PASSED: buyCard charges right amount of money for a basic buy
PASSED: buyCard decrements available buy actions
FAILED: buyCard does not place bought card in discard
FAILED: buyCard fails to return an error code when there are insufficient funds for a purchase
FAILED: buyCard failures have side-effects
change in discard pile: 0 
 coin change: -3 
 buyChange: 0
FAILED: buyCard fails to give curses to people who buy from embargoed supplies
FAILED: buyCard fails to return an error code when there are insufficient buys for a purchase

 Card Test 1 ----------------
PASSED: No error value in basic smithy test
PASSED: Basic smithy test added correct number of cards to hand
PASSED: Basic smithy test took correct number of cards from deck
PASSED: Error value in smithy-less smithy test
FAILED: Error value in empty-deck smithy test

 Card Test 2 ----------------
PASSED: No error value in steward draw test
FAILED: Steward draw test put the wrong number of cards into the hand
PASSED: Steward draw test took the right number of cards from the deck
FAILED: Error value in basic steward coin test
FAILED: Steward coin test does not add 2 coins
PASSED: No error value in steward trash test
FAILED: Steward coin test does not remove cards properly

 Card Test 3 ----------------
FAILED: Error value in sea hag test
PASSED: Curses added in order in sea hag test
FAILED: Curse replacement in sea hag test failed
FAILED: Curses not added to empty deck/discard in sea hag test

 Card Test 4 ---------------
PASSED: embargo does not return error for a basic test
PASSED: embargo gives the user 2 extra coins
PASSED: embargo increments the proper supply's embargo tokensFile 'dominion.c'
Lines executed:37.31% of 579
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <time.h>
        -:    8:
      330:    9:int compare(const void* a, const void* b) {
      330:   10:  if (*(int*)a > *(int*)b)
    #####:   11:    return 1;
      330:   12:  if (*(int*)a < *(int*)b)
       88:   13:    return -1;
      242:   14:  return 0;
        -:   15:}
        -:   16:
       12:   17:struct gameState* newGame() {
       12:   18:  struct gameState* g = malloc(sizeof(struct gameState));
       12:   19:  return g;
        -:   20:}
        -:   21:
       12:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
       12:   24:  int* k = (int*)malloc(10 * sizeof(int));
       12:   25:  k[0] = k1;
       12:   26:  k[1] = k2;
       12:   27:  k[2] = k3;
       12:   28:  k[3] = k4;
       12:   29:  k[4] = k5;
       12:   30:  k[5] = k6;
       12:   31:  k[6] = k7;
       12:   32:  k[7] = k8;
       12:   33:  k[8] = k9;
       12:   34:  k[9] = k10;
       12:   35:  return k;
        -:   36:}
        -:   37:
        -:   38:
        -:   39:
       12:   40:int initializeGame(int numPlayers, int*  kingdomCards, int randomSeed,
        -:   41:		   struct gameState *state) {
        -:   42:
        -:   43:  int i;
        -:   44:  int j;
        -:   45:  int it;
        -:   46:  //set up random number generator
       12:   47:  SelectStream(1);
       12:   48:  PutSeed((long)randomSeed);
        -:   49:
        -:   50:  //check number of players
       12:   51:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   52:    {
        2:   53:      return -1;
        -:   54:    }
        -:   55:
        -:   56:  //set number of players
       10:   57:  state->numPlayers = numPlayers;
        -:   58:
        -:   59:
        -:   60:  //check selected kingdom cards are different
       99:   61:  for (i = 0; i < 10; i++)
        -:   62:    {
       91:   63:      if(kingdomCards[i]<=province || kingdomCards[i]>treasure_map){
        1:   64:	 return -1;
        -:   65:      }
      989:   66:      for (j = 0; j < 10; j++)
        -:   67:        {
      900:   68:	  if ( j != i && kingdomCards[j] == kingdomCards[i]  )
        -:   69:	    {
        1:   70:	      return -1;
        -:   71:	    }
        -:   72:        }
        -:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
        8:   80:  if (numPlayers == 2)
        -:   81:    {
        5:   82:      state->supplyCount[curse] = 10;
        -:   83:    }
        3:   84:  else if (numPlayers == 3)
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
        -:   87:    }
        -:   88:  else
        -:   89:    {
        3:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
        8:   94:  if (numPlayers == 2)
        -:   95:    {
        5:   96:      state->supplyCount[estate] = 8;
        5:   97:      state->supplyCount[duchy] = 8;
        5:   98:      state->supplyCount[province] = 8;
        -:   99:    }
        -:  100:  else
        -:  101:    {
        3:  102:      state->supplyCount[estate] = 12;
        3:  103:      state->supplyCount[duchy] = 12;
        3:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
        8:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  109:  state->supplyCount[silver] = 40;
        8:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
      168:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  114:    {
     1320:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  116:	{
     1240:  117:	  if (kingdomCards[j] == i)
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
       80:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  121:		{
       32:  122:		  if (numPlayers == 2){
       10:  123:		    state->supplyCount[i] = 8;
        -:  124:		  }
        6:  125:		  else{ state->supplyCount[i] = 12; }
        -:  126:		}
        -:  127:	      else
        -:  128:		{
       64:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
       80:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
     1160:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
        -:  137:	}
        -:  138:
        -:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
       30:  145:  for (i = 0; i < numPlayers; i++)
        -:  146:    {
       22:  147:      state->deckCount[i] = 0;
       88:  148:      for (j = 0; j < 3; j++)
        -:  149:	{
       66:  150:	  state->deck[i][j] = estate;
       66:  151:	  state->deckCount[i]++;
        -:  152:	}
      176:  153:      for (j = 3; j < 10; j++)
        -:  154:	{
      154:  155:	  state->deck[i][j] = copper;
      154:  156:	  state->deckCount[i]++;
        -:  157:	}
        -:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
       30:  161:  for (i = 0; i < numPlayers; i++)
        -:  162:    {
       22:  163:      if ( shuffle(i, state) < 0 )
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
        -:  167:    }
        -:  168:
        -:  169:  //draw player hands
       30:  170:  for (i = 0; i < numPlayers; i++)
        -:  171:    {
        -:  172:      //initialize hand size to zero
       22:  173:      state->handCount[i] = 0;
       22:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
        -:  180:    }
        -:  181:
        -:  182:  //set embargo tokens to 0 for all supply piles
      224:  183:  for (i = 0; i <= treasure_map; i++)
        -:  184:    {
      216:  185:      state->embargoTokens[i] = 0;
        -:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
        8:  189:  state->outpostPlayed = 0;
        8:  190:  state->phase = 0;
        8:  191:  state->numActions = 1;
        8:  192:  state->numBuys = 1;
        8:  193:  state->playedCardCount = 0;
        8:  194:  state->whoseTurn = 0;
        8:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
       48:  199:  for (it = 0; it < 5; it++){
       40:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        8:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        8:  205:  return 0;
        -:  206:}
        -:  207:
       22:  208:int shuffle(int player, struct gameState *state) {
        -:  209:
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       22:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       22:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
       22:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      264:  221:  while (state->deckCount[player] > 0) {
      220:  222:    card = floor(Random() * state->deckCount[player]);
      220:  223:    newDeck[newDeckPos] = state->deck[player][card];
      220:  224:    newDeckPos++;
      714:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
      494:  226:      state->deck[player][i] = state->deck[player][i+1];
        -:  227:    }
      220:  228:    state->deckCount[player]--;
        -:  229:  }
      242:  230:  for (i = 0; i < newDeckPos; i++) {
      220:  231:    state->deck[player][i] = newDeck[i];
      220:  232:    state->deckCount[player]++;
        -:  233:  }
        -:  234:
       22:  235:  return 0;
        -:  236:}
        -:  237:
        8:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  239:{
        -:  240:  int card;
        8:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
        8:  244:  if (state->phase != 0)
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:
        -:  249:  //check if player has enough actions
        8:  250:  if ( state->numActions < 1 )
        -:  251:    {
        4:  252:      return -1;
        -:  253:    }
        -:  254:
        -:  255:  //get card played
        4:  256:  card = handCard(handPos, state);
        -:  257:
        -:  258:  //check if selected card is an action
        4:  259:  if ( card < adventurer || card > treasure_map )
        -:  260:    {
        1:  261:      return -1;
        -:  262:    }
        -:  263:
        -:  264:  //play card
        3:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:
        -:  270:  //reduce number of actions
        3:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
        3:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:
        3:  276:  return 0;
        -:  277:}
        -:  278:
        4:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
        4:  287:  who = state->whoseTurn;
        -:  288:
        4:  289:  if (state->numBuys < 1){
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
        1:  292:    return -1;
        3:  293:  } else if (supplyCount(supplyPos, state) <1){
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
        3:  297:  } else if (state->coins < getCost(supplyPos)){
        -:  298:    if (DEBUG)
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  300:    return -1;
        -:  301:  } else {
        2:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
        2:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:
        2:  306:    state->coins = (state->coins) - (getCost(supplyPos));
        2:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:
        2:  315:  return 0;
        -:  316:}
        -:  317:
    #####:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
        4:  322:int handCard(int handPos, struct gameState *state) {
        4:  323:  int currentPlayer = whoseTurn(state);
        4:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
        9:  327:int supplyCount(int card, struct gameState *state) {
        -:  328:
        9:  329:   if(card<0 || card>treasure_map){
        2:  330:   	return -1;
        -:  331:   }
        7:  332:  return state->supplyCount[card];
        -:  333:}
        -:  334:
    #####:  335:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  336:  int i;
    #####:  337:  int count = 0;
        -:  338:
    #####:  339:  for (i = 0; i < state->deckCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->deck[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->handCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->hand[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  for (i = 0; i < state->discardCount[player]; i++)
        -:  350:    {
    #####:  351:      if (state->discard[player][i] == card) count++;
        -:  352:    }
        -:  353:
    #####:  354:  return count;
        -:  355:}
        -:  356:
       11:  357:int whoseTurn(struct gameState *state) {
       11:  358:  return state->whoseTurn;
        -:  359:}
        -:  360:
        4:  361:int endTurn(struct gameState *state) {
        -:  362:  int k;
        -:  363:  int i;
        4:  364:  int currentPlayer = whoseTurn(state);
        -:  365:
        -:  366:  //Discard hand
        9:  367:  for (i = 0; i < state->handCount[currentPlayer]; i++){
        5:  368:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
        5:  369:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  370:  }
        4:  371:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  372:
        -:  373:
       24:  374:  for(k=0; k<5; k++){
       20:  375:     drawCard(currentPlayer,state);
        -:  376:  }
        -:  377:
        -:  378:  //Code for determining the player
        4:  379:  if (currentPlayer < (state->numPlayers - 1)){
        3:  380:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  381:  }
        -:  382:  else{
        1:  383:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  384:  }
        -:  385:
        4:  386:  state->outpostPlayed = 0;
        4:  387:  state->phase = 0;
        4:  388:  state->numActions = 1;
        4:  389:  state->coins = 0;
        4:  390:  state->numBuys = 1;
        4:  391:  state->playedCardCount = 0;
        4:  392:  state->handCount[state->whoseTurn] = 0;
        -:  393:
        -:  394:
        -:  395:  //Update money
        4:  396:  updateCoins(state->whoseTurn, state , 0);
        -:  397:
        4:  398:  return 0;
        -:  399:}
        -:  400:
    #####:  401:int isGameOver(struct gameState *state) {
        -:  402:  int i;
        -:  403:  int j;
        -:  404:
        -:  405:  //if stack of Province cards is empty, the game ends
    #####:  406:  if (state->supplyCount[province] == 0)
        -:  407:    {
    #####:  408:      return 1;
        -:  409:    }
        -:  410:
        -:  411:  //if three supply pile are at 0, the game ends
    #####:  412:  j = 0;
    #####:  413:  for (i = 0; i < 25; i++)
        -:  414:    {
    #####:  415:      if (state->supplyCount[i] == 0)
        -:  416:	{
    #####:  417:	  j++;
        -:  418:	}
        -:  419:    }
    #####:  420:  if ( j >= 3)
        -:  421:    {
    #####:  422:      return 1;
        -:  423:    }
        -:  424:
    #####:  425:  return 0;
        -:  426:}
        -:  427:
    #####:  428:int scoreFor (int player, struct gameState *state) {
        -:  429:
        -:  430:  int i;
    #####:  431:  int score = 0;
        -:  432:  //score from hand
    #####:  433:  for (i = 0; i < state->handCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from discard
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
        -:  454:  //score from deck
    #####:  455:  for (i = 0; i < state->discardCount[player]; i++)
        -:  456:    {
    #####:  457:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  458:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  459:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  460:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  461:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  462:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  463:    }
        -:  464:
    #####:  465:  return score;
        -:  466:}
        -:  467:
    #####:  468:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  469:  int i;
        -:  470:  int j;
        -:  471:  int highScore;
        -:  472:  int currentPlayer;
        -:  473:
        -:  474:  //get score for each player
    #####:  475:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  476:    {
        -:  477:      //set unused player scores to -9999
    #####:  478:      if (i >= state->numPlayers)
        -:  479:	{
    #####:  480:	  players[i] = -9999;
        -:  481:	}
        -:  482:      else
        -:  483:	{
    #####:  484:	  players[i] = scoreFor (i, state);
        -:  485:	}
        -:  486:    }
        -:  487:
        -:  488:  //find highest score
    #####:  489:  j = 0;
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if (players[i] > players[j])
        -:  493:	{
    #####:  494:	  j = i;
        -:  495:	}
        -:  496:    }
    #####:  497:  highScore = players[j];
        -:  498:
        -:  499:  //add 1 to players who had less turns
    #####:  500:  currentPlayer = whoseTurn(state);
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] == highScore && i > currentPlayer )
        -:  504:	{
    #####:  505:	  players[i]++;
        -:  506:	}
        -:  507:    }
        -:  508:
        -:  509:  //find new highest score
    #####:  510:  j = 0;
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] > players[j] )
        -:  514:	{
    #####:  515:	  j = i;
        -:  516:	}
        -:  517:    }
    #####:  518:  highScore = players[j];
        -:  519:
        -:  520:  //set winners in array to 1 and rest to 0
    #####:  521:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  522:    {
    #####:  523:      if ( players[i] == highScore )
        -:  524:	{
    #####:  525:	  players[i] = 1;
        -:  526:	}
        -:  527:      else
        -:  528:	{
    #####:  529:	  players[i] = 0;
        -:  530:	}
        -:  531:    }
        -:  532:
    #####:  533:  return 0;
        -:  534:}
        -:  535:
       65:  536:int drawCard(int player, struct gameState *state)
        -:  537:{	int count;
        -:  538:  int deckCounter;
       65:  539:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  540:
        -:  541:    //Step 1 Shuffle the discard pile back into a deck
        -:  542:    int i;
        -:  543:    //Move discard to deck
    #####:  544:    for (i = 0; i < state->discardCount[player];i++){
    #####:  545:      state->deck[player][i] = state->discard[player][i];
    #####:  546:      state->discard[player][i] = -1;
        -:  547:    }
        -:  548:
    #####:  549:    state->deckCount[player] = state->discardCount[player];
    #####:  550:    state->discardCount[player] = 0;//Reset discard
        -:  551:
        -:  552:    //Shufffle the deck
    #####:  553:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  554:
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  557:    }
        -:  558:
    #####:  559:    state->discardCount[player] = 0;
        -:  560:
        -:  561:    //Step 2 Draw Card
    #####:  562:    count = state->handCount[player];//Get current player's hand count
        -:  563:
        -:  564:    if (DEBUG){//Debug statements
        -:  565:      printf("Current hand count: %d\n", count);
        -:  566:    }
        -:  567:
    #####:  568:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  569:
    #####:  570:    if (deckCounter == 0){
    #####:  571:      return -1;
        -:  572:    }
        -:  573:
    #####:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  575:    state->deckCount[player]--;
    #####:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
        -:  579:  else{
       65:  580:    int count = state->handCount[player];//Get current hand count for player
        -:  581:    int deckCounter;
        -:  582:    if (DEBUG){//Debug statements
        -:  583:      printf("Current hand count: %d\n", count);
        -:  584:    }
        -:  585:
       65:  586:    deckCounter = state->deckCount[player];//Create holder for the deck count
       65:  587:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       65:  588:    state->deckCount[player]--;
       65:  589:    state->handCount[player]++;//Increment hand count
        -:  590:  }
        -:  591:
       65:  592:  return 0;
        -:  593:}
        -:  594:
        5:  595:int getCost(int cardNumber)
        -:  596:{
        5:  597:  switch( cardNumber )
        -:  598:    {
        -:  599:    case curse:
    #####:  600:      return 0;
        -:  601:    case estate:
    #####:  602:      return 2;
        -:  603:    case duchy:
    #####:  604:      return 5;
        -:  605:    case province:
    #####:  606:      return 8;
        -:  607:    case copper:
        2:  608:      return 0;
        -:  609:    case silver:
        3:  610:      return 3;
        -:  611:    case gold:
    #####:  612:      return 6;
        -:  613:    case adventurer:
    #####:  614:      return 6;
        -:  615:    case council_room:
    #####:  616:      return 5;
        -:  617:    case feast:
    #####:  618:      return 4;
        -:  619:    case gardens:
    #####:  620:      return 4;
        -:  621:    case mine:
    #####:  622:      return 5;
        -:  623:    case remodel:
    #####:  624:      return 4;
        -:  625:    case smithy:
    #####:  626:      return 4;
        -:  627:    case village:
    #####:  628:      return 3;
        -:  629:    case baron:
    #####:  630:      return 4;
        -:  631:    case great_hall:
    #####:  632:      return 3;
        -:  633:    case minion:
    #####:  634:      return 5;
        -:  635:    case steward:
    #####:  636:      return 3;
        -:  637:    case tribute:
    #####:  638:      return 5;
        -:  639:    case ambassador:
    #####:  640:      return 3;
        -:  641:    case cutpurse:
    #####:  642:      return 4;
        -:  643:    case embargo:
    #####:  644:      return 2;
        -:  645:    case outpost:
    #####:  646:      return 5;
        -:  647:    case salvager:
    #####:  648:      return 4;
        -:  649:    case sea_hag:
    #####:  650:      return 4;
        -:  651:    case treasure_map:
    #####:  652:      return 4;
        -:  653:    }
        -:  654:
    #####:  655:  return -1;
        -:  656:}
        -:  657:
        -:  658:
        -:  659:
        -:  660:
    #####:  661:int adventurer_effect (int currentPlayer, struct gameState* state){
        -:  662:
    #####:  663:    int z=0;
        -:  664:    int cardDrawn;
    #####:  665:    int drawntreasure=0;
        -:  666:    int temphand[MAX_HAND];
    #####:  667:    while(drawntreasure<2){
        -:  668:
    #####:  669:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  670:            shuffle(currentPlayer, state);
        -:  671:        }
        -:  672:
    #####:  673:        drawCard(currentPlayer, state);
    #####:  674:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  675:
    #####:  676:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
    #####:  677:            drawntreasure++;
        -:  678:        }
        -:  679:        else{
    #####:  680:            temphand[z]=cardDrawn;
    #####:  681:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  682:            z++;
        -:  683:        }
        -:  684:
        -:  685:    }
        -:  686:
    #####:  687:    while(z-1>=0){
    #####:  688:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  689:        z=z-1;
        -:  690:    }
        -:  691:
    #####:  692:    return 0;
        -:  693:
        -:  694:}
        -:  695:
        -:  696:
        -:  697:////////// 8U6
    #####:  698:int council_room_effect(int currentPlayer, struct gameState* state, int handPos){
        -:  699:
        -:  700:    int i;
        -:  701:    //+4 Cards
    #####:  702:    for (i = 0; i < 3; i++){
    #####:  703:        drawCard(currentPlayer, state);
        -:  704:    }
        -:  705:
        -:  706:    //+1 Buy
    #####:  707:    state->numBuys++;
        -:  708:
        -:  709:    //Each other player draws a card
    #####:  710:    for (i = 0; i < state->numPlayers; i++){
    #####:  711:        if ( i == currentPlayer ){
    #####:  712:            drawCard(i, state);
        -:  713:        }
        -:  714:    }
        -:  715:
        -:  716:    //put played card in played card pile
    #####:  717:    discardCard(handPos, currentPlayer, state, 0);
        -:  718:
    #####:  719:    return 0;
        -:  720:
        -:  721:}
        -:  722:
        -:  723:
    #####:  724:int feast_effect(int currentPlayer, struct gameState* state, int choice1){
        -:  725:
        -:  726:
        -:  727:    int i;
        -:  728:    int temphand[MAX_HAND];
        -:  729:    //gain card with cost up to 5
        -:  730:    //Backup hand
    #####:  731:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  732:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  733:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  734:    }
        -:  735:    //Backup hand
        -:  736:
        -:  737:    //Update Coins for Buy
    #####:  738:    updateCoins(currentPlayer, state, 5);
    #####:  739:    int x = 1;//Condition to loop on
    #####:  740:    while( x == 1) {//Buy one card
    #####:  741:        if (supplyCount(choice1, state) <= 0){
        -:  742:            if (DEBUG){
        -:  743:                printf("None of that card left, sorry!\n");
        -:  744:            }
        -:  745:
        -:  746:            if (DEBUG){
        -:  747:                printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  748:            }
        -:  749:        }
    #####:  750:        else if (state->coins < getCost(choice1)){
    #####:  751:            printf("That card is too expensive!\n");
        -:  752:
        -:  753:            if (DEBUG){
        -:  754:                printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  755:            }
        -:  756:        }
        -:  757:        else{
        -:  758:
        -:  759:            if (DEBUG){
        -:  760:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  761:            }
        -:  762:
    #####:  763:            gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  764:            x = 0;//No more buying cards
        -:  765:
        -:  766:            if (DEBUG){
        -:  767:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  768:            }
        -:  769:
        -:  770:        }
        -:  771:    }
        -:  772:
        -:  773:    //Reset Hand
    #####:  774:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  775:        state->hand[currentPlayer][i] = temphand[i];
    #####:  776:        temphand[i] = -1;
        -:  777:    }
        -:  778:    //Reset Hand
        -:  779:
    #####:  780:    return 0;
        -:  781:
        -:  782:
        -:  783:}
        -:  784:
    #####:  785:int gardens_effect(){
        -:  786:
    #####:  787:    return -1;
        -:  788:
        -:  789:}
        -:  790:
        -:  791://///////// 8U6
    #####:  792:int mine_effect(int currentPlayer, struct gameState* state, int handPos, int choice1, int choice2){
        -:  793:
        -:  794:    int i;
    #####:  795:    int j = state->hand[currentPlayer][choice2];  //store card we will trash
        -:  796:
    #####:  797:    if (state->hand[currentPlayer+1%2][choice2] < copper || state->hand[currentPlayer%2][choice2] > gold){
    #####:  798:        return -1;
        -:  799:    }
        -:  800:
    #####:  801:    if (choice1 > treasure_map || choice1 < curse){
    #####:  802:        return -1;
        -:  803:    }
        -:  804:
        -:  805:
    #####:  806:    i=choice1;
    #####:  807:    choice1=choice2;
    #####:  808:    choice2=i;
        -:  809:
        -:  810:
    #####:  811:    if ( (getCost(state->hand[currentPlayer][choice2]) + 3) > getCost(choice1) ){
    #####:  812:        return -1;
        -:  813:    }
        -:  814:
    #####:  815:    gainCard(choice2, state, 2, currentPlayer);
        -:  816:
        -:  817:    //discard card from hand
    #####:  818:    discardCard(handPos, currentPlayer, state, 0);
        -:  819:
        -:  820:    //discard trashed card
    #####:  821:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  822:        if (state->hand[currentPlayer][i] == j){
    #####:  823:            discardCard(i, currentPlayer, state, 0);
    #####:  824:            break;
        -:  825:        }
        -:  826:    }
        -:  827:
    #####:  828:    return 0;
        -:  829:
        -:  830:}
        -:  831:
        -:  832:
        -:  833://///////// 8U6
    #####:  834:int remodel_effect(int currentPlayer, struct gameState* state, int handPos, int choice1, int choice2){
        -:  835:
        -:  836:    int i;
    #####:  837:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  838:
    #####:  839:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ){
    #####:  840:        return -1;
        -:  841:    }
        -:  842:
    #####:  843:    gainCard(choice2, state, 0, currentPlayer);
        -:  844:
        -:  845:    //discard card from hand
    #####:  846:    discardCard(handPos, currentPlayer, state, 0);
        -:  847:
        -:  848:    //discard trashed card
    #####:  849:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  850:        if (state->hand[currentPlayer][i] == j){
    #####:  851:            discardCard(i--, currentPlayer, state, 0);
        -:  852:        }
        -:  853:    }
        -:  854:
    #####:  855:    return 0;
        -:  856:
        -:  857:
        -:  858:}
        -:  859:
        -:  860:
        -:  861:
        1:  862:int smithy_effect(int currentPlayer, struct gameState* state, int handPos){
        -:  863:
        -:  864:    //+3 Cards
        -:  865:    int i;
        4:  866:    for (i = 0; i < 3; i++){
        3:  867:       if(drawCard(currentPlayer, state)==-1){
    #####:  868:          return -1;
        -:  869:       }
        -:  870:    }
        -:  871:
        -:  872:    //discard card from hand
        1:  873:    discardCard(handPos, currentPlayer, state, 0);
        1:  874:    return 0;
        -:  875:
        -:  876:}
        -:  877:
        -:  878:
    #####:  879:int village_effect(int currentPlayer, struct gameState* state, int handPos){
        -:  880:
        -:  881:    //+1 Card
    #####:  882:    drawCard(currentPlayer, state);
        -:  883:
        -:  884:    //+2 Actions
    #####:  885:    state->numActions = state->numActions + 2;
        -:  886:
        -:  887:    //discard played card from hand
    #####:  888:    discardCard(handPos, currentPlayer, state, 0);
    #####:  889:    return 0;
        -:  890:
        -:  891:}
        -:  892:
        -:  893:
        -:  894:
    #####:  895:int baron_effect(int currentPlayer, struct gameState* state, int choice1){
        -:  896:
    #####:  897:    state->numBuys++;//Increase buys by 1!
    #####:  898:    if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  899:        int p = 0;//Iterator for hand!
    #####:  900:        int card_not_discarded = 1;//Flag for discard set!
    #####:  901:        while(card_not_discarded){
    #####:  902:            if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  903:                state->coins += 4;//Add 4 coins to the amount of coins
    #####:  904:                state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  905:                state->discardCount[currentPlayer]++;
    #####:  906:                for (;p < state->handCount[currentPlayer]; p++){
    #####:  907:                    state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  908:                }
    #####:  909:                state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  910:                state->handCount[currentPlayer]--;
    #####:  911:                card_not_discarded = 0;//Exit the loop
        -:  912:            }
    #####:  913:            else if (p > state->handCount[currentPlayer]){
        -:  914:                if(DEBUG) {
        -:  915:                    printf("No estate cards in your hand, invalid choice\n");
        -:  916:                    printf("Must gain an estate if there are any\n");
        -:  917:                }
    #####:  918:                if (supplyCount(estate, state) > 0){
    #####:  919:                    gainCard(estate, state, 0, currentPlayer);
    #####:  920:                    state->supplyCount[estate]--;//Decrement estates
    #####:  921:                    if (supplyCount(estate, state) == 0){
    #####:  922:                        isGameOver(state);
        -:  923:                    }
        -:  924:                }
    #####:  925:                card_not_discarded = 0;//Exit the loop
        -:  926:            }
        -:  927:
        -:  928:            else{
    #####:  929:                p++;//Next card
        -:  930:            }
        -:  931:        }
        -:  932:    }
        -:  933:
        -:  934:    else{
    #####:  935:        if (supplyCount(estate, state) > 0){
    #####:  936:            gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  937:            state->supplyCount[estate]--;//Decrement Estates
    #####:  938:            if (supplyCount(estate, state) == 0){
    #####:  939:                isGameOver(state);
        -:  940:            }
        -:  941:        }
        -:  942:    }
        -:  943:
        -:  944:
    #####:  945:    return 0;
        -:  946:
        -:  947:}
        -:  948:
        -:  949:
    #####:  950:int great_hall_effect(int currentPlayer, struct gameState* state, int handPos){
        -:  951:
        -:  952:    //+1 Card
    #####:  953:    drawCard(currentPlayer, state);
        -:  954:
        -:  955:    //+1 Actions
    #####:  956:    state->numActions++;
        -:  957:
        -:  958:    //discard card from hand
    #####:  959:    discardCard(handPos, currentPlayer, state, 0);
    #####:  960:    return 0;
        -:  961:
        -:  962:}
        -:  963:
        -:  964:
    #####:  965:int minion_effect(int currentPlayer, struct gameState* state, int handPos, int choice1,int choice2){
        -:  966:
        -:  967:    int i;
        -:  968:    int j;
        -:  969:    //+1 action
    #####:  970:    state->numActions++;
        -:  971:
        -:  972:    //discard card from hand
    #####:  973:    discardCard(handPos, currentPlayer, state, 0);
        -:  974:
    #####:  975:    if (choice1){//+2 coins
    #####:  976:        state->coins = state->coins + 2;
        -:  977:    }
        -:  978:
    #####:  979:    else if (choice2){		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  980:        //discard hand
    #####:  981:        while(numHandCards(state) > 0){
    #####:  982:            discardCard(handPos, currentPlayer, state, 0);
        -:  983:        }
        -:  984:
        -:  985:        //draw 4
    #####:  986:        for (i = 0; i < 4; i++){
    #####:  987:            drawCard(currentPlayer, state);
        -:  988:        }
        -:  989:
        -:  990:        //other players discard hand and redraw if hand size > 4
    #####:  991:        for (i = 0; i < state->numPlayers; i++){
    #####:  992:            if (i != currentPlayer){
    #####:  993:                if ( state->handCount[i] > 4 ){
        -:  994:                    //discard hand
    #####:  995:                    while( state->handCount[i] > 0 ){
    #####:  996:                        discardCard(handPos, i, state, 0);
        -:  997:                    }
        -:  998:
        -:  999:                    //draw 4
    #####: 1000:                    for (j = 0; j < 4; j++){
    #####: 1001:                        drawCard(i, state);
        -: 1002:                    }
        -: 1003:                }
        -: 1004:            }
        -: 1005:        }
        -: 1006:
        -: 1007:    }
    #####: 1008:    return 0;
        -: 1009:
        -: 1010:}
        -: 1011:
        -: 1012:
        1: 1013:int steward_effect(int currentPlayer, struct gameState* state, int handPos, int choice1, int choice2, int choice3){
        -: 1014:
        1: 1015:    if (choice1 == 1){
        -: 1016:        //+2 cards
        1: 1017:        drawCard(currentPlayer, state);
        1: 1018:        drawCard(currentPlayer, state);
        -: 1019:    }
    #####: 1020:    else if (choice1 == 2){
        -: 1021:        //+2 coins
    #####: 1022:        state->coins = state->coins + 2;
        -: 1023:    }
        -: 1024:    else{
        -: 1025:        //trash 2 cards in hand
    #####: 1026:        discardCard(choice2, currentPlayer, state, 1);
    #####: 1027:        discardCard(choice3, currentPlayer, state, 1);
        -: 1028:    }
        -: 1029:
        -: 1030:    //discard card from hand
        1: 1031:    discardCard(handPos, currentPlayer, state, 0);
        1: 1032:    return 0;
        -: 1033:
        -: 1034:
        -: 1035:}
        -: 1036:
        -: 1037:/**
        -: 1038:int tribute_effect(){
        -: 1039:
        -: 1040:
        -: 1041:
        -: 1042:}
        -: 1043:
        -: 1044:
        -: 1045:int ambassador_effect(){
        -: 1046:
        -: 1047:
        -: 1048:
        -: 1049:}
        -: 1050:
        -: 1051:
        -: 1052:int cutpurse_effect(){
        -: 1053:
        -: 1054:
        -: 1055:
        -: 1056:}
        -: 1057:
        -: 1058:
        -: 1059:int embargo_effect(){
        -: 1060:
        -: 1061:
        -: 1062:
        -: 1063:
        -: 1064:}
        -: 1065:
        -: 1066:
        -: 1067:int outpost_effect(){
        -: 1068:
        -: 1069:
        -: 1070:
        -: 1071:}
        -: 1072:
        -: 1073:
        -: 1074:int salvager_effect(){
        -: 1075:
        -: 1076:
        -: 1077:
        -: 1078:}
        -: 1079:
        -: 1080:
        -: 1081:int sea_hag_effect(){
        -: 1082:
        -: 1083:
        -: 1084:
        -: 1085:}
        -: 1086:
        -: 1087:
        -: 1088:int treasure_map_effect(){
        -: 1089:
        -: 1090:
        -: 1091:
        -: 1092:}
        -: 1093:**/
        -: 1094:
        -: 1095:
        -: 1096:
        -: 1097:
        -: 1098:
        3: 1099:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -: 1100:{
        -: 1101:  int i;
        -: 1102:  int j;
        -: 1103:  int k;
        -: 1104:  int index;
        3: 1105:  int currentPlayer = whoseTurn(state);
        3: 1106:  int nextPlayer = currentPlayer + 1;
        -: 1107:
        3: 1108:  int tributeRevealedCards[2] = {-1, -1};
        -: 1109:
        3: 1110:  if (nextPlayer > (state->numPlayers - 1)){
    #####: 1111:    nextPlayer = 0;
        -: 1112:  }
        -: 1113:
        -: 1114:
        -: 1115:  //uses switch to select card and perform actions
        3: 1116:  switch( card ){
        -: 1117:    case adventurer:
        -: 1118:
    #####: 1119:        return adventurer_effect(currentPlayer,state);
        -: 1120:
        -: 1121:    case council_room:
        -: 1122:
    #####: 1123:        return council_room_effect(currentPlayer,state,handPos);
        -: 1124:
        -: 1125:    case feast:
        -: 1126:
    #####: 1127:        return feast_effect(currentPlayer,state,choice1);
        -: 1128:
        -: 1129:    case gardens:
        -: 1130:
    #####: 1131:        return gardens_effect();
        -: 1132:
        -: 1133:    case mine:
        -: 1134:
    #####: 1135:        return mine_effect(currentPlayer,state,handPos,choice1,choice2);
        -: 1136:
        -: 1137:    case remodel:
        -: 1138:
    #####: 1139:        return remodel_effect(currentPlayer,state,handPos,choice1,choice2);
        -: 1140:
        -: 1141:    case smithy:
        -: 1142:
        1: 1143:        return smithy_effect(currentPlayer,state,handPos);
        -: 1144:
        -: 1145:    case village:
        -: 1146:
    #####: 1147:        return village_effect(currentPlayer,state,handPos);
        -: 1148:
        -: 1149:    case baron:
        -: 1150:
    #####: 1151:        return baron_effect(currentPlayer,state,choice1);
        -: 1152:
        -: 1153:    case great_hall:
        -: 1154:
    #####: 1155:        return great_hall_effect(currentPlayer,state,handPos);
        -: 1156:
        -: 1157:    case minion:
        -: 1158:
    #####: 1159:        return minion_effect(currentPlayer,state,handPos,choice1,choice2);
        -: 1160:
        -: 1161:    case steward:
        -: 1162:
        1: 1163:        return steward_effect(currentPlayer,state,handPos,choice1,choice2,choice3);
        -: 1164:
        -: 1165:    case tribute:
    #####: 1166:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1167:	if (state->deckCount[nextPlayer] > 0){
    #####: 1168:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1169:	  state->deckCount[nextPlayer]--;
        -: 1170:	}
    #####: 1171:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1172:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1173:	  state->discardCount[nextPlayer]--;
        -: 1174:	}
        -: 1175:	else{
        -: 1176:	  //No Card to Reveal
        -: 1177:	  if (DEBUG){
        -: 1178:	    printf("No cards to reveal\n");
        -: 1179:	  }
        -: 1180:	}
        -: 1181:      }
        -: 1182:
        -: 1183:      else{
    #####: 1184:	if (state->deckCount[nextPlayer] == 0){
    #####: 1185:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1186:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1187:	    state->deckCount[nextPlayer]++;
    #####: 1188:	    state->discard[nextPlayer][i] = -1;
    #####: 1189:	    state->discardCount[nextPlayer]--;
        -: 1190:	  }
        -: 1191:
    #####: 1192:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1193:	}
    #####: 1194:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1195:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1196:	state->deckCount[nextPlayer]--;
    #####: 1197:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1198:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1199:	state->deckCount[nextPlayer]--;
        -: 1200:      }
        -: 1201:
    #####: 1202:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1203:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1204:	state->playedCardCount++;
    #####: 1205:	tributeRevealedCards[1] = -1;
        -: 1206:      }
        -: 1207:
    #####: 1208:      for (i = 0; i <= 2; i ++){
    #####: 1209:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1210:	  state->coins += 2;
        -: 1211:	}
        -: 1212:
    #####: 1213:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1214:	  drawCard(currentPlayer, state);
    #####: 1215:	  drawCard(currentPlayer, state);
        -: 1216:	}
        -: 1217:	else{//Action Card
    #####: 1218:	  state->numActions = state->numActions + 2;
        -: 1219:	}
        -: 1220:      }
        -: 1221:
    #####: 1222:      return 0;
        -: 1223:
        -: 1224:    case ambassador:
    #####: 1225:      j = 0;		//used to check if player has enough cards to discard
        -: 1226:
    #####: 1227:      if (choice2 > 2 || choice2 < 0)
        -: 1228:	{
    #####: 1229:	  return -1;
        -: 1230:	}
        -: 1231:
    #####: 1232:      if (choice1 == handPos)
        -: 1233:	{
    #####: 1234:	  return -1;
        -: 1235:	}
        -: 1236:
    #####: 1237:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1238:	{
    #####: 1239:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1240:	    {
    #####: 1241:	      j++;
        -: 1242:	    }
        -: 1243:	}
    #####: 1244:      if (j < choice2)
        -: 1245:	{
    #####: 1246:	  return -1;
        -: 1247:	}
        -: 1248:
        -: 1249:      if (DEBUG)
        -: 1250:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1251:
        -: 1252:      //increase supply count for choosen card by amount being discarded
    #####: 1253:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1254:
        -: 1255:      //each other player gains a copy of revealed card
    #####: 1256:      for (i = 0; i < state->numPlayers; i++)
        -: 1257:	{
    #####: 1258:	  if (i != currentPlayer)
        -: 1259:	    {
    #####: 1260:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1261:	    }
        -: 1262:	}
        -: 1263:
        -: 1264:      //discard played card from hand
    #####: 1265:      discardCard(handPos, currentPlayer, state, 0);
        -: 1266:
        -: 1267:      //trash copies of cards returned to supply
    #####: 1268:      for (j = 0; j < choice2; j++)
        -: 1269:	{
    #####: 1270:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1271:	    {
    #####: 1272:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1273:		{
    #####: 1274:		  discardCard(i, currentPlayer, state, 1);
    #####: 1275:		  break;
        -: 1276:		}
        -: 1277:	    }
        -: 1278:	}
        -: 1279:
    #####: 1280:      return 0;
        -: 1281:
        -: 1282:    case cutpurse:
        -: 1283:
    #####: 1284:      updateCoins(currentPlayer, state, 2);
    #####: 1285:      for (i = 0; i < state->numPlayers; i++)
        -: 1286:	{
    #####: 1287:	  if (i != currentPlayer)
        -: 1288:	    {
    #####: 1289:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1290:		{
    #####: 1291:		  if (state->hand[i][j] == copper)
        -: 1292:		    {
    #####: 1293:		      discardCard(j, i, state, 0);
    #####: 1294:		      break;
        -: 1295:		    }
    #####: 1296:		  if (j == state->handCount[i])
        -: 1297:		    {
    #####: 1298:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1299:			{
        -: 1300:			  if (DEBUG)
        -: 1301:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1302:			}
    #####: 1303:		      break;
        -: 1304:		    }
        -: 1305:		}
        -: 1306:
        -: 1307:	    }
        -: 1308:
        -: 1309:	}
        -: 1310:
        -: 1311:      //discard played card from hand
    #####: 1312:      discardCard(handPos, currentPlayer, state, 0);
        -: 1313:
    #####: 1314:      return 0;
        -: 1315:
        -: 1316:
        -: 1317:    case embargo:
        -: 1318:      //+2 Coins
        1: 1319:      state->coins = state->coins + 2;
        -: 1320:
        -: 1321:      //see if selected pile is in play
        1: 1322:      if ( state->supplyCount[choice1] == -1 )
        -: 1323:	{
    #####: 1324:	  return -1;
        -: 1325:	}
        -: 1326:
        -: 1327:      //add embargo token to selected supply pile
        1: 1328:      state->embargoTokens[choice1]++;
        -: 1329:
        -: 1330:      //trash card
        1: 1331:      discardCard(handPos, currentPlayer, state, 1);
        1: 1332:      return 0;
        -: 1333:
        -: 1334:    case outpost:
        -: 1335:      //set outpost flag
    #####: 1336:      state->outpostPlayed++;
        -: 1337:
        -: 1338:      //discard card
    #####: 1339:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1340:      return 0;
        -: 1341:
        -: 1342:    case salvager:
        -: 1343:      //+1 buy
    #####: 1344:      state->numBuys++;
        -: 1345:
    #####: 1346:      if (choice1)
        -: 1347:	{
        -: 1348:	  //gain coins equal to trashed card
    #####: 1349:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1350:	  //trash card
    #####: 1351:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1352:	}
        -: 1353:
        -: 1354:      //discard card
    #####: 1355:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1356:      return 0;
        -: 1357:
        -: 1358:    case sea_hag:
    #####: 1359:      for (i = 0; i < state->numPlayers; i++){
    #####: 1360:	if (i != currentPlayer){
    #####: 1361:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1362:	  state->discardCount[i]++;
    #####: 1363:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1364:	}
        -: 1365:      }
    #####: 1366:      return 0;
        -: 1367:
        -: 1368:    case treasure_map:
        -: 1369:      //search hand for another treasure_map
    #####: 1370:      index = -1;
    #####: 1371:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1372:	{
    #####: 1373:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1374:	    {
    #####: 1375:	      index = i;
    #####: 1376:	      break;
        -: 1377:	    }
        -: 1378:	}
    #####: 1379:      if (index > -1)
        -: 1380:	{
        -: 1381:	  //trash both treasure cards
    #####: 1382:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1383:	  discardCard(index, currentPlayer, state, 1);
        -: 1384:
        -: 1385:	  //gain 4 Gold cards
    #####: 1386:	  for (i = 0; i < 4; i++)
        -: 1387:	    {
    #####: 1388:	      gainCard(gold, state, 1, currentPlayer);
        -: 1389:	    }
        -: 1390:
        -: 1391:	  //return success
    #####: 1392:	  return 1;
        -: 1393:	}
        -: 1394:
        -: 1395:      //no second treasure_map found in hand
    #####: 1396:      return -1;
        -: 1397:    }
        -: 1398:
    #####: 1399:  return -1;
        -: 1400:}
        -: 1401:
        3: 1402:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1403:{
        -: 1404:
        -: 1405:  //if card is not trashed, added to Played pile
        3: 1406:  if (trashFlag < 1)
        -: 1407:    {
        -: 1408:      //add card to played pile
        2: 1409:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        2: 1410:      state->playedCardCount++;
        -: 1411:    }
        -: 1412:
        -: 1413:  //set played card to -1
        3: 1414:  state->hand[currentPlayer][handPos] = -1;
        -: 1415:
        -: 1416:  //remove card from player's hand
        3: 1417:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1418:    {
        -: 1419:      //reduce number of cards in hand
        1: 1420:      state->handCount[currentPlayer]--;
        -: 1421:    }
        2: 1422:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1423:    {
        -: 1424:      //reduce number of cards in hand
    #####: 1425:      state->handCount[currentPlayer]--;
        -: 1426:    }
        -: 1427:  else
        -: 1428:    {
        -: 1429:      //replace discarded card with last card in hand
        2: 1430:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1431:      //set last card to -1
        2: 1432:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1433:      //reduce number of cards in hand
        2: 1434:      state->handCount[currentPlayer]--;
        -: 1435:    }
        -: 1436:
        3: 1437:  return 0;
        -: 1438:}
        -: 1439:
        2: 1440:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1441:{
        -: 1442:  //Note: supplyPos is enum of choosen card
        -: 1443:
        -: 1444:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1445:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1446:    {
    #####: 1447:      return -1;
        -: 1448:    }
        -: 1449:
        -: 1450:  //added card for [whoseTurn] current player:
        -: 1451:  // toFlag = 0 : add to discard
        -: 1452:  // toFlag = 1 : add to deck
        -: 1453:  // toFlag = 2 : add to hand
        -: 1454:
        2: 1455:  if (toFlag == 1)
        -: 1456:    {
    #####: 1457:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1458:      state->deckCount[player]++;
        -: 1459:    }
        2: 1460:  else if (toFlag == 2)
        -: 1461:    {
    #####: 1462:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1463:      state->handCount[player]++;
        -: 1464:    }
        -: 1465:  else
        -: 1466:    {
        2: 1467:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1468:      state->discardCount[player]++;
        -: 1469:    }
        -: 1470:
        -: 1471:  //decrease number in supply pile
        2: 1472:  state->supplyCount[supplyPos]--;
        -: 1473:
        2: 1474:  return 0;
        -: 1475:}
        -: 1476:
       15: 1477:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1478:{
        -: 1479:  int i;
        -: 1480:
        -: 1481:  //reset coin count
       15: 1482:  state->coins = 0;
        -: 1483:
        -: 1484:  //add coins for each Treasure card in player's hand
       75: 1485:  for (i = 0; i < state->handCount[player]; i++)
        -: 1486:    {
       60: 1487:      if (state->hand[player][i] == copper)
        -: 1488:	{
       48: 1489:	  state->coins += 1;
        -: 1490:	}
       12: 1491:      else if (state->hand[player][i] == silver)
        -: 1492:	{
    #####: 1493:	  state->coins += 2;
        -: 1494:	}
       12: 1495:      else if (state->hand[player][i] == gold)
        -: 1496:	{
    #####: 1497:	  state->coins += 3;
        -: 1498:	}
        -: 1499:    }
        -: 1500:
        -: 1501:  //add bonus
       15: 1502:  state->coins += bonus;
        -: 1503:
       15: 1504:  return 0;
        -: 1505:}
        -: 1506:
        -: 1507:
        -: 1508://end of dominion.c
        -: 1509:
